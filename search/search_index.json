{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PROFIL \u00b6 NAMA : RENA ANNISA' NPM : 180411100005 KELAS : KOMPUTASI NUMERIK 4-A DOSEN PENGAMPU : MULA'AB, S.Si.,M.Kom","title":"PROFIL"},{"location":"#profil","text":"NAMA : RENA ANNISA' NPM : 180411100005 KELAS : KOMPUTASI NUMERIK 4-A DOSEN PENGAMPU : MULA'AB, S.Si.,M.Kom","title":"PROFIL"},{"location":"authors-notes/","text":"Author's notes \u00b6 Hi, I'm Martin ( @squidfunk ) \u00b6 I'm a freelance polyglot software engineer and entrepreneur from Cologne, Germany with more than 12 years of experience in full-stack web development and system programming. If you're interested in my projects, please see my CV . Why another theme? \u00b6 Some time ago I wanted to release a project to the open, but it was in need of user documentation. I checked out the available tools and stuck with MkDocs, because it was so simple and easy to use. However, none of the available themes convinced me. I wanted to build something that was usable on all screen sizes from the ground up, something beautiful and practical at the same time. Google's Material Design appeared to be the perfect fit and this something became Material, a Material Design theme for MkDocs.","title":"Author's notes"},{"location":"authors-notes/#authors-notes","text":"","title":"Author's notes"},{"location":"authors-notes/#hi-im-martin-squidfunk","text":"I'm a freelance polyglot software engineer and entrepreneur from Cologne, Germany with more than 12 years of experience in full-stack web development and system programming. If you're interested in my projects, please see my CV .","title":"Hi, I'm Martin (@squidfunk)"},{"location":"authors-notes/#why-another-theme","text":"Some time ago I wanted to release a project to the open, but it was in need of user documentation. I checked out the available tools and stuck with MkDocs, because it was so simple and easy to use. However, none of the available themes convinced me. I wanted to build something that was usable on all screen sizes from the ground up, something beautiful and practical at the same time. Google's Material Design appeared to be the perfect fit and this something became Material, a Material Design theme for MkDocs.","title":"Why another theme?"},{"location":"compliance/","text":"MONTE CARLO METHODS AND SIMULATION \u00b6 Metode Monte Carlo adalah algoritma komputasi untuk mensimulasikan berbagai perilaku sistem fisika dan matematika. Penggunaan klasik metode ini adalah untuk mengevaluasi integral definit, terutama integral multidimensi dengan syarat dan batasan yang rumit. Metode Monte Carlo pertama kali ditemukan oleh Enrico Fermi pada tahun 1930-an. Monte Carlo merupakan metode yang memberikan segala kemungkinan nilai dari suatu variabel yang memanfaatkan strong law of large number dalam melakukan perhitungan, artinya semakin banyak variabel acak yang digunakan akan semakin baik pula pendekatan nilai eksaknya. Monte Cerlo umumnya dilakukan menggunakan komputer dan memakai berbagai teknik simulasi komputer karena algoritma Monte Carlo memerlukan perulangan (repetisi) dan perhitungan yang sangat kompleks. Langkah-langkah teknik simulasi Monte Carlo : Menetapkan sebuah distribusi probabilitas bagi variable penting. Membuat distribusi probabilitas kumulatif bagi setiap variable. Menetapkan sebuah interval bilangan acak bagi setiap variable. Membangkitkan bilangan acak. Mensimulasikan serangkaian percobaan. Rumus Monte Carlo Methods secara umum yaitu : \\int _{A}f\\approx(\\textit{measure of A}) \\times(\\textit{average of f over n random points in A}) \\int _{A}f\\approx(\\textit{measure of A}) \\times(\\textit{average of f over n random points in A}) Berikut merupakan rumus pendekatan integral dengan metode Monte Carlo untuk memperkirakan area dan volume : \\int_{0}^{1}f(x)dx\\approx\\frac{1}{n}\\sum_{i=1}^{n}f(x_{i}) \\int_{0}^{1}f(x)dx\\approx\\frac{1}{n}\\sum_{i=1}^{n}f(x_{i}) \\int_{0}^{1}\\int_{0}^{1}\\int_{0}^{1}f(x,y,z)\\textit{dx dy dz}\\approx\\frac{1}{n}\\sum_{i=1}^{n}f(x_{i},y_{i},z_{i}) \\int_{0}^{1}\\int_{0}^{1}\\int_{0}^{1}f(x,y,z)\\textit{dx dy dz}\\approx\\frac{1}{n}\\sum_{i=1}^{n}f(x_{i},y_{i},z_{i}) TUGAS \u00b6 1). Write a program to verify numerically that \\pi = \\int_{0}^{2}(4-x^{2})^{\\frac{1}{2}}dx \\pi = \\int_{0}^{2}(4-x^{2})^{\\frac{1}{2}}dx \u200b use the Monte Carlo method and 2500 random numbers. 2). Use the Monte Carlo method to approximate the integral \\int_{-1}^{1}\\int_{-1}^{1}\\int_{-1}^{1} (x^{2}+y^{2}+z^{2})\\textit{dx dy dz} \\int_{-1}^{1}\\int_{-1}^{1}\\int_{-1}^{1} (x^{2}+y^{2}+z^{2})\\textit{dx dy dz} \u200b Compare with the correct answer. JAWABAN \u00b6 1). Berikut program nomor 1 from scipy import random import numpy as np import matplotlib.pyplot as plt a = 0 b = 2 N = 2500 def func ( x ): return ( 4 - x ** 2 ) ** 0.5 area = [] for i in range ( N ): xrand = np . zeros ( N ) for i in range ( len ( xrand )): xrand [ i ] = random . uniform ( a , b ) integral = 0.0 for i in range ( N ): integral += func ( xrand [ i ]) jawab = ( b - a ) / float ( N ) * integral area . append ( jawab ) plt . title ( \"Hasil phi\" ) plt . hist ( area , bins = 30 , ec = 'black' ) plt . xlabel ( \"Area\" ) plt . show () Hasil running : \ufffc 2). Berikut program no 2 from scipy import random import numpy as np a = - 1 b = 1 N = 100 xrand = np . zeros ( N ) yrand = np . zeros ( N ) zrand = np . zeros ( N ) integral = 0.0 for i in range ( 4 ): for i in range ( len ( xrand )): xrand [ i ] = random . uniform ( a , b ) for i in range ( len ( yrand )): yrand [ i ] = random . uniform ( a , b ) for i in range ( len ( zrand )): zrand [ i ] = random . uniform ( a , b ) def func ( x , y , z ): return ( x ** 2 ) + ( y ** 2 ) + ( z ** 2 ) for i in range ( N ): integral += func ( xrand [ i ], yrand [ i ], zrand [ i ]) jawab = ( b - a ) / float ( N ) * integral print ( \"jawab: \" , jawab ) Hasil running : jawab : 8.026829965624735","title":"MONTE CARLO METHODS AND SIMULATION"},{"location":"compliance/#monte-carlo-methods-and-simulation","text":"Metode Monte Carlo adalah algoritma komputasi untuk mensimulasikan berbagai perilaku sistem fisika dan matematika. Penggunaan klasik metode ini adalah untuk mengevaluasi integral definit, terutama integral multidimensi dengan syarat dan batasan yang rumit. Metode Monte Carlo pertama kali ditemukan oleh Enrico Fermi pada tahun 1930-an. Monte Carlo merupakan metode yang memberikan segala kemungkinan nilai dari suatu variabel yang memanfaatkan strong law of large number dalam melakukan perhitungan, artinya semakin banyak variabel acak yang digunakan akan semakin baik pula pendekatan nilai eksaknya. Monte Cerlo umumnya dilakukan menggunakan komputer dan memakai berbagai teknik simulasi komputer karena algoritma Monte Carlo memerlukan perulangan (repetisi) dan perhitungan yang sangat kompleks. Langkah-langkah teknik simulasi Monte Carlo : Menetapkan sebuah distribusi probabilitas bagi variable penting. Membuat distribusi probabilitas kumulatif bagi setiap variable. Menetapkan sebuah interval bilangan acak bagi setiap variable. Membangkitkan bilangan acak. Mensimulasikan serangkaian percobaan. Rumus Monte Carlo Methods secara umum yaitu : \\int _{A}f\\approx(\\textit{measure of A}) \\times(\\textit{average of f over n random points in A}) \\int _{A}f\\approx(\\textit{measure of A}) \\times(\\textit{average of f over n random points in A}) Berikut merupakan rumus pendekatan integral dengan metode Monte Carlo untuk memperkirakan area dan volume : \\int_{0}^{1}f(x)dx\\approx\\frac{1}{n}\\sum_{i=1}^{n}f(x_{i}) \\int_{0}^{1}f(x)dx\\approx\\frac{1}{n}\\sum_{i=1}^{n}f(x_{i}) \\int_{0}^{1}\\int_{0}^{1}\\int_{0}^{1}f(x,y,z)\\textit{dx dy dz}\\approx\\frac{1}{n}\\sum_{i=1}^{n}f(x_{i},y_{i},z_{i}) \\int_{0}^{1}\\int_{0}^{1}\\int_{0}^{1}f(x,y,z)\\textit{dx dy dz}\\approx\\frac{1}{n}\\sum_{i=1}^{n}f(x_{i},y_{i},z_{i})","title":"MONTE CARLO METHODS AND SIMULATION"},{"location":"compliance/#tugas","text":"1). Write a program to verify numerically that \\pi = \\int_{0}^{2}(4-x^{2})^{\\frac{1}{2}}dx \\pi = \\int_{0}^{2}(4-x^{2})^{\\frac{1}{2}}dx \u200b use the Monte Carlo method and 2500 random numbers. 2). Use the Monte Carlo method to approximate the integral \\int_{-1}^{1}\\int_{-1}^{1}\\int_{-1}^{1} (x^{2}+y^{2}+z^{2})\\textit{dx dy dz} \\int_{-1}^{1}\\int_{-1}^{1}\\int_{-1}^{1} (x^{2}+y^{2}+z^{2})\\textit{dx dy dz} \u200b Compare with the correct answer.","title":"TUGAS"},{"location":"compliance/#jawaban","text":"1). Berikut program nomor 1 from scipy import random import numpy as np import matplotlib.pyplot as plt a = 0 b = 2 N = 2500 def func ( x ): return ( 4 - x ** 2 ) ** 0.5 area = [] for i in range ( N ): xrand = np . zeros ( N ) for i in range ( len ( xrand )): xrand [ i ] = random . uniform ( a , b ) integral = 0.0 for i in range ( N ): integral += func ( xrand [ i ]) jawab = ( b - a ) / float ( N ) * integral area . append ( jawab ) plt . title ( \"Hasil phi\" ) plt . hist ( area , bins = 30 , ec = 'black' ) plt . xlabel ( \"Area\" ) plt . show () Hasil running : \ufffc 2). Berikut program no 2 from scipy import random import numpy as np a = - 1 b = 1 N = 100 xrand = np . zeros ( N ) yrand = np . zeros ( N ) zrand = np . zeros ( N ) integral = 0.0 for i in range ( 4 ): for i in range ( len ( xrand )): xrand [ i ] = random . uniform ( a , b ) for i in range ( len ( yrand )): yrand [ i ] = random . uniform ( a , b ) for i in range ( len ( zrand )): zrand [ i ] = random . uniform ( a , b ) def func ( x , y , z ): return ( x ** 2 ) + ( y ** 2 ) + ( z ** 2 ) for i in range ( N ): integral += func ( xrand [ i ], yrand [ i ], zrand [ i ]) jawab = ( b - a ) / float ( N ) * integral print ( \"jawab: \" , jawab ) Hasil running : jawab : 8.026829965624735","title":"JAWABAN"},{"location":"contributing/","text":"Richardson Extrapolation \u00b6 Richardson Extrapolation merupakan metode percepatan urutan yang digunakan untuk meningkatkan laju konvergensi suatu urutan. Metode ini diperkenalkan oleh Lewis Fry Richardson pada awal abad ke-20. Fungsi dari metode ini yaitu untuk perhitungan praktis yang sulit ditaksir terlalu tinggi. Richardson Extrapolation termasuk integrasi Romberg, yang menerapkan ekstrapolasi Richardson pada aturan trapesium, dan algoritma Bulirsch-Stoer untuk menyelesaikan persamaan diferensial biasa. Berikut merupakan formula dari richardson extrapolation. Beda terpusat (Central Difference): f'(x) = \\frac{f(x+h)-f(x-h)}{2h} + O(h^{2}) f'(x) = \\frac{f(x+h)-f(x-h)}{2h} + O(h^{2}) Ditetapkan f (x) dan x tertentu : \\phi (h) = \\frac{f(x+h)-f(x-h)}{2h} + O(h_{2}) \\phi (h) = \\frac{f(x+h)-f(x-h)}{2h} + O(h_{2}) \\phi (h) = f'(x)-a_{2}h^{2}-a_{4}h^{4}-a_{6}h^{6}- ..... \\phi (h) = f'(x)-a_{2}h^{2}-a_{4}h^{4}-a_{6}h^{6}- ..... \\phi (\\frac{h}{2}) = f'(x)-a_{2}\\left ( \\frac{h}{2} \\right )^2- a_{4}\\left ( \\frac{h}{2} \\right )^4-a_{6}\\left ( \\frac{h}{2} \\right )^6- ..... \\phi (\\frac{h}{2}) = f'(x)-a_{2}\\left ( \\frac{h}{2} \\right )^2- a_{4}\\left ( \\frac{h}{2} \\right )^4-a_{6}\\left ( \\frac{h}{2} \\right )^6- ..... \\phi (h) - 4 \\phi (\\frac{h}{2}) = -3 f'(x) -\\frac{3}{4} a_{4} h^{4} - \\frac{15}{16} a_{6} h^{6} - ..... \\phi (h) - 4 \\phi (\\frac{h}{2}) = -3 f'(x) -\\frac{3}{4} a_{4} h^{4} - \\frac{15}{16} a_{6} h^{6} - ..... \\Rightarrow f'(x) = \\frac{3}{4} \\phi(h/2)-\\frac{1}{3}\\phi(h)+O(h^{4}) \\Rightarrow f'(x) = \\frac{3}{4} \\phi(h/2)-\\frac{1}{3}\\phi(h)+O(h^{4}) Soal \u00b6 Jika diketahui f(x) = -0.1 x^{4} - 0.15x^{3} - 0.5x^{2} - 0.25x + 1.2 f(x) = -0.1 x^{4} - 0.15x^{3} - 0.5x^{2} - 0.25x + 1.2 Mulai dengan h1 = 0.5 dan h2 = 0.25, hitung estimasi dengan f\u2019(0.5) menggunakan Richardson Extrapolation. Berikut merupakan program untuk jawaban soal di atas. from math import * def zeros ( n , m ): Z = [] for i in range ( n ): Z . append ([ 0 ] * m ) return Z def D ( Func , a , h ): return ( Func ( a + h ) - Func ( a - h )) / ( 2 * h ) def Richardson_dif ( func , a ): '''Richardson extrapolation method for numerical calculation of first derivative ''' k = 9 L = zeros ( k , k ) for I in range ( k ): L [ I ][ 0 ] = D ( func , a , 1 / ( 2 ** ( I + 1 ))) for j in range ( 1 , k ): for i in range ( k - j ): L [ i ][ j ] = (( 4 ** ( j )) * L [ i + 1 ][ j - 1 ] - L [ i ][ j - 1 ]) / ( 4 ** ( j ) - 1 ) return L [ 0 ][ k - 1 ] print ( '>>>>>>>>>>>>>>>>>>>>>>> Richardson Extrapolation <<<<<<<<<<<<<<<<<<<<<' ) print ( \" \" ) print ( \"Nilai sesungguhnya dari f'(0.5) = -0.9125\" ) print ( \"=======================================================================\" ) print ( 'f = -0.1*x**4-0.15*x**3-0.5*x**2-0.25*x+1.2 dengan x = 0.5' ) print ( \"=======================================================================\" ) print ( \"f'(0.5) = \" , ' %04.20f ' % Richardson_dif ( lambda x : - 0.1 * x ** 4 - 0.15 * x ** 3 - 0.5 * x ** 2 - 0.25 * x + 1.2 , 0.5 )) print ( \" \" ) print ( \"Jadi nilai estimasi terbaiknya adalah \" , ' %04.20f ' % Richardson_dif ( lambda x : - 0.1 * x ** 4 - 0.15 * x ** 3 - 0.5 * x ** 2 - 0.25 * x + 1.2 , 0.5 )) Output: >>>>>>>>>>>>>>>>>>>>>>> Richardson Extrapolation <<<<<<<<<<<<<<<<<<<<< Nilai sesungguhnya dari f '(0.5) = -0.9125 ======================================================================= f = - 0.1 * x ** 4 - 0.15 * x ** 3 - 0.5 * x ** 2 - 0.25 * x + 1.2 dengan x = 0.5 ======================================================================= f '(0.5) = -0.91250000000000530687 Jadi nilai estimasi terbaiknya adalah - 0.91250000000000530687","title":"RICHARDSON EXTRAPOLATION"},{"location":"contributing/#richardson-extrapolation","text":"Richardson Extrapolation merupakan metode percepatan urutan yang digunakan untuk meningkatkan laju konvergensi suatu urutan. Metode ini diperkenalkan oleh Lewis Fry Richardson pada awal abad ke-20. Fungsi dari metode ini yaitu untuk perhitungan praktis yang sulit ditaksir terlalu tinggi. Richardson Extrapolation termasuk integrasi Romberg, yang menerapkan ekstrapolasi Richardson pada aturan trapesium, dan algoritma Bulirsch-Stoer untuk menyelesaikan persamaan diferensial biasa. Berikut merupakan formula dari richardson extrapolation. Beda terpusat (Central Difference): f'(x) = \\frac{f(x+h)-f(x-h)}{2h} + O(h^{2}) f'(x) = \\frac{f(x+h)-f(x-h)}{2h} + O(h^{2}) Ditetapkan f (x) dan x tertentu : \\phi (h) = \\frac{f(x+h)-f(x-h)}{2h} + O(h_{2}) \\phi (h) = \\frac{f(x+h)-f(x-h)}{2h} + O(h_{2}) \\phi (h) = f'(x)-a_{2}h^{2}-a_{4}h^{4}-a_{6}h^{6}- ..... \\phi (h) = f'(x)-a_{2}h^{2}-a_{4}h^{4}-a_{6}h^{6}- ..... \\phi (\\frac{h}{2}) = f'(x)-a_{2}\\left ( \\frac{h}{2} \\right )^2- a_{4}\\left ( \\frac{h}{2} \\right )^4-a_{6}\\left ( \\frac{h}{2} \\right )^6- ..... \\phi (\\frac{h}{2}) = f'(x)-a_{2}\\left ( \\frac{h}{2} \\right )^2- a_{4}\\left ( \\frac{h}{2} \\right )^4-a_{6}\\left ( \\frac{h}{2} \\right )^6- ..... \\phi (h) - 4 \\phi (\\frac{h}{2}) = -3 f'(x) -\\frac{3}{4} a_{4} h^{4} - \\frac{15}{16} a_{6} h^{6} - ..... \\phi (h) - 4 \\phi (\\frac{h}{2}) = -3 f'(x) -\\frac{3}{4} a_{4} h^{4} - \\frac{15}{16} a_{6} h^{6} - ..... \\Rightarrow f'(x) = \\frac{3}{4} \\phi(h/2)-\\frac{1}{3}\\phi(h)+O(h^{4}) \\Rightarrow f'(x) = \\frac{3}{4} \\phi(h/2)-\\frac{1}{3}\\phi(h)+O(h^{4})","title":"Richardson Extrapolation"},{"location":"contributing/#soal","text":"Jika diketahui f(x) = -0.1 x^{4} - 0.15x^{3} - 0.5x^{2} - 0.25x + 1.2 f(x) = -0.1 x^{4} - 0.15x^{3} - 0.5x^{2} - 0.25x + 1.2 Mulai dengan h1 = 0.5 dan h2 = 0.25, hitung estimasi dengan f\u2019(0.5) menggunakan Richardson Extrapolation. Berikut merupakan program untuk jawaban soal di atas. from math import * def zeros ( n , m ): Z = [] for i in range ( n ): Z . append ([ 0 ] * m ) return Z def D ( Func , a , h ): return ( Func ( a + h ) - Func ( a - h )) / ( 2 * h ) def Richardson_dif ( func , a ): '''Richardson extrapolation method for numerical calculation of first derivative ''' k = 9 L = zeros ( k , k ) for I in range ( k ): L [ I ][ 0 ] = D ( func , a , 1 / ( 2 ** ( I + 1 ))) for j in range ( 1 , k ): for i in range ( k - j ): L [ i ][ j ] = (( 4 ** ( j )) * L [ i + 1 ][ j - 1 ] - L [ i ][ j - 1 ]) / ( 4 ** ( j ) - 1 ) return L [ 0 ][ k - 1 ] print ( '>>>>>>>>>>>>>>>>>>>>>>> Richardson Extrapolation <<<<<<<<<<<<<<<<<<<<<' ) print ( \" \" ) print ( \"Nilai sesungguhnya dari f'(0.5) = -0.9125\" ) print ( \"=======================================================================\" ) print ( 'f = -0.1*x**4-0.15*x**3-0.5*x**2-0.25*x+1.2 dengan x = 0.5' ) print ( \"=======================================================================\" ) print ( \"f'(0.5) = \" , ' %04.20f ' % Richardson_dif ( lambda x : - 0.1 * x ** 4 - 0.15 * x ** 3 - 0.5 * x ** 2 - 0.25 * x + 1.2 , 0.5 )) print ( \" \" ) print ( \"Jadi nilai estimasi terbaiknya adalah \" , ' %04.20f ' % Richardson_dif ( lambda x : - 0.1 * x ** 4 - 0.15 * x ** 3 - 0.5 * x ** 2 - 0.25 * x + 1.2 , 0.5 )) Output: >>>>>>>>>>>>>>>>>>>>>>> Richardson Extrapolation <<<<<<<<<<<<<<<<<<<<< Nilai sesungguhnya dari f '(0.5) = -0.9125 ======================================================================= f = - 0.1 * x ** 4 - 0.15 * x ** 3 - 0.5 * x ** 2 - 0.25 * x + 1.2 dengan x = 0.5 ======================================================================= f '(0.5) = -0.91250000000000530687 Jadi nilai estimasi terbaiknya adalah - 0.91250000000000530687","title":"Soal"},{"location":"customization/","text":"METODE ELIMINASI GAUSS, JACOBI DAN SEIDEL \u00b6 Metode Eliminasi Gauss \u00b6 Metode eliminasi gauss merupakan metode yang dikembangkan dari metode eliminasi, yaitu dengan menghilangkan atau mengurangi jumlah variabel sehingga dapat diperoleh nilai dari suati variabel bebas. Adapun konsep dari metode eliminasi gauss yaitu mengubah matriks pada bagian kiri menjadi matriks segitiga atas atau bawah dengan menggunakan OBE (Operasi Baris Elementer) . Sehingga penyelesaiannya dapat diperoleh dengan : Menukar posisi dua buah persamaan (dua baris matriks augmented) Menambah sebuah persamaan (baris matriks augmented) dengan suatu kelipatan persamaan lain (baris lain) Mengalihkan sebuah persamaan (baris matriks augmented) dengan sembarang konstanta taknol. Berikut formula untuk eliminasi maju ( Forward Elimination ) a_{ij} = a_{ij}-(\\frac {a_ik}{a_kk}) a_{kj} ,(k<=j<=n) a_{ij} = a_{ij}-(\\frac {a_ik}{a_kk}) a_{kj} ,(k<=j<=n) Berikut formula untuk eliminasi mundur ( Backward Substitution ) x_{n} = \\frac{b_{n}}{a_{n,n}} x_{n} = \\frac{b_{n}}{a_{n,n}} x_{n-1} = \\frac {b_{n-1n}x_{n}}{a_{n-1,n-1}} x_{n-1} = \\frac {b_{n-1n}x_{n}}{a_{n-1,n-1}} x_{n-2} = \\frac{b_{n-2}-a_{n-2,n}x_{n}-a_{n-2,n-1}x_{n-1}}{a_{n-2,n-2}} x_{n-2} = \\frac{b_{n-2}-a_{n-2,n}x_{n}-a_{n-2,n-1}x_{n-1}}{a_{n-2,n-2}} .................... .................... x_{i}=\\frac{b_{i}-\\sum_{j=i+1}^{n} a_{i.j}x_{j}}{a_i,j} x_{i}=\\frac{b_{i}-\\sum_{j=i+1}^{n} a_{i.j}x_{j}}{a_i,j} Source Code untuk Eliminasi Gauss import numpy as np #Definisi Matrix A = [] B = [] n = int ( input ( \"Masukkan ukuran Matrix: \" )) for i in range ( n ): baris = [] for i in range ( n ): a = int ( input ( \"Masukkan Nilai: \" )) baris . append ( a ) A . append ( baris ) for i in range ( n ): h = int ( input ( \"Masukkan Hasil: \" )) B . append ( h ) Matrix = np . array ( A , float ) Hasil = np . array ( B , float ) n = len ( Matrix ) #Eliminasi Gauss for k in range ( 0 , n - 1 ): for i in range ( k + 1 , n ): if Matrix [ i , k ] != 0 : lam = Matrix [ i , k ] / Matrix [ k , k ] Matrix [ i , k : n ] = Matrix [ i , k : n ] - ( Matrix [ k , k : n ] * lam ) Hasil [ i ] = Hasil [ i ] - ( Hasil [ k ] * lam ) print ( \"Matrix A : \" , ' \\n ' , Matrix ) #Subtitution x = np . zeros ( n , float ) for m in range ( n - 1 , - 1 , - 1 ): x [ m ] = ( Hasil [ m ] - np . dot ( Matrix [ m , m + 1 : n ], x [ m + 1 : n ])) / Matrix [ m , m ] print ( 'Nilai X ' , m + 1 , '=' , x [ m ]) Output: Masukkan ukuran Matrix : 3 Masukkan Nilai : 2 Masukkan Nilai : - 2 Masukkan Nilai : 5 Masukkan Nilai : 1 Masukkan Nilai : 5 Masukkan Nilai : 2 Masukkan Nilai : 4 Masukkan Nilai : 5 Masukkan Nilai : 2 Masukkan Hasil : 12 Masukkan Hasil : 3 Masukkan Hasil : - 4 Matrix A : [[ 2. - 2. 5. ] [ 0. 6. - 0.5 ] [ 0. 0. - 7.25 ]] Nilai X 3 = 3.2413793103448274 Nilai X 2 = - 0.2298850574712644 Nilai X 1 = - 2.333333333333332 Metode Iterasi Jacobi \u00b6 Metode Iterasi Jacobi merupakan salah satu bidang analisis numerik yang digunakan untuk menyelesaikan permasalahan Persamaan Linier dan sering dijumpai dalam berbagai disiplin ilmu. Metode Iterasi Jacobi merupakan salah satu metode tak langsung, yaitu bermula dari suatu hampiran penyelesaian awal dan kemudian berusaha memperbaiki hampiran dalam tak berhingga namun langkah konvergen. Metode Iterasi Jacobi ini digunakan untuk menyelesaikan persamaan Linier berukuran besar dan proporsi koefisien nolnya besar. Berikut bentuk umum iterasi Jacobi : x_{i} = \\frac{1}{a_{ii}}(b_{i} - \\sum_{j,i}^{n}a_{ij}x_{j}^{(k-1)}), i = 1,2,...,n;k = 1,2,3,..., x_{i} = \\frac{1}{a_{ii}}(b_{i} - \\sum_{j,i}^{n}a_{ij}x_{j}^{(k-1)}), i = 1,2,...,n;k = 1,2,3,..., Suatu matriks A berukuran n x n dikatakan dominan secara diagonal apabila : |a_{ii}|>|a_{i,1}|+...+|a_{i,i-1}|+|a_{i,i+1}|+...+|a_{in}| , i=1,2,...,n. |a_{ii}|>|a_{i,1}|+...+|a_{i,i-1}|+|a_{i,i+1}|+...+|a_{in}| , i=1,2,...,n. Source Code untuk Metode Iterasi Jacobi from pprint import pprint from numpy import array , zeros , diag , diagflat , dot import numpy as np def jacobi ( A , b , N = 25 , x = None ): #Membuat iniial guess if x is None : x = zeros ( len ( A [ 0 ])) #Membuat vektor dari elemen matrix A D = diag ( A ) R = A - diagflat ( D ) #Iterasi for i in range ( N ): x = ( b - dot ( R , x )) / D return x Mat1 = [] Mat2 = [] n = int ( input ( \"Masukkan ukuran Matrix: \" )) for i in range ( n ): baris = [] for i in range ( n ): a = int ( input ( \"Masukkan Nilai: \" )) baris . append ( a ) Mat1 . append ( baris ) for i in range ( n ): h = int ( input ( \"Masukkan Hasil: \" )) Mat2 . append ( h ) A = array ( Mat1 , float ) b = array ( Mat2 , float ) x = len ( Mat1 ) guess = np . zeros ( x , float ) sol = jacobi ( A , b , N = 25 , x = guess ) print ( \"A:\" ) pprint ( A ) print ( \"b:\" ) pprint ( b ) print ( \"x:\" ) pprint ( sol ) Output: Masukkan ukuran Matrix : 3 Masukkan Nilai : 3 Masukkan Nilai : 1 Masukkan Nilai : - 1 Masukkan Nilai : 4 Masukkan Nilai : 7 Masukkan Nilai : - 3 Masukkan Nilai : 2 Masukkan Nilai : - 2 Masukkan Nilai : 5 Masukkan Hasil : 5 Masukkan Hasil : 20 Masukkan Hasil : 10 A : array ([[ 3. , 1. , - 1. ], [ 4. , 7. , - 3. ], [ 2. , - 2. , 5. ]]) b : array ([ 5. , 20. , 10. ]) x : array ([ 1.50602413 , 3.13253016 , 2.6506024 ]) Metode Iterasi Gauss Seidel \u00b6 Metode iterasi gauss seidel digunakan untuk menyelesaikan sistem persamaan linear (SPL) berukuran besar dan proporsi koefisien nolnya besar, seperti sistem-sistem yang banyak ditemukan dalam sistem persamaan diferensial. Metode iterasi Gauss-Seidel dikembangkan dari gagasan metode iterasi pada solusi persamaan non linier. Metode ini dapat memperkecil sesatan pembulatan karena dapat meneruskan iterasi sampai solusinya seteliti mungkin sesuai dengan batas yang ditentukan. Berikut bentuk umum iterasi Gauss-Seidel. x_{i} = \\frac{1}{a_{ii}}(b_{i}-\\sum_{j=1}^{i-1}a_{ij}x_{j}^{(k)}-\\sum_{j=i+1}^{n}a_{ij}x_{j}^{(k-1)}), i = 1,2,...,n;k=1,2,3,... x_{i} = \\frac{1}{a_{ii}}(b_{i}-\\sum_{j=1}^{i-1}a_{ij}x_{j}^{(k)}-\\sum_{j=i+1}^{n}a_{ij}x_{j}^{(k-1)}), i = 1,2,...,n;k=1,2,3,... Source Code untuk Metode Iterasi Gauss Seidel def seidel ( a , x , b ): #Mencari Panjang Matrix n = len ( a ) for j in range ( 0 , n ): d = b [ j ] #Menghitung xi, yi, zi for i in range ( 0 , n ): if ( j != i ): d -= a [ j ][ i ] * x [ i ] x [ j ] = d / a [ j ][ j ] #Solusi return x m = int ( input ( \"Masukkan Panjang Matrix: \" )) a = [] b = [] for k in range ( m ): mat1 = [] for i in range ( m ): l = float ( input ( \"Masukkan a\" + str ( k + 1 ) + \",\" + str ( i + 1 ) + \": \" )) mat1 . append ( l ) h = float ( input ( \"Masukkan Hasil: \" )) b . append ( h ) a . append ( mat1 ) n = 3 x = [ 0 , 0 , 0 ] print ( x ) for i in range ( 0 , 100 ): x = seidel ( a , x , b ) print ( x ) Output: Masukkan Panjang Matrix : 3 Masukkan a1 , 1 : 4 Masukkan a1 , 2 : - 1 Masukkan a1 , 3 : 1 Masukkan Hasil : 7 Masukkan a2 , 1 : 4 Masukkan a2 , 2 : - 8 Masukkan a2 , 3 : 1 Masukkan Hasil : - 21 Masukkan a3 , 1 : - 2 Masukkan a3 , 2 : 1 Masukkan a3 , 3 : 5 Masukkan Hasil : 15 [ 0 , 0 , 0 ] [ 1.75 , 3.5 , 3.0 ] [ 1.875 , 3.9375 , 2.9625 ] [ 1.99375 , 3.9921875 , 2.9990625 ] [ 1.99828125 , 3.9990234375 , 2.9995078125 ] [ 1.99987890625 , 3.9998779296875 , 2.9999759765625003 ] [ 1.99997548828125 , 3.9999847412109375 , 2.999993247070312 ] [ 1.9999978735351562 , 3.9999980926513667 , 2.999999530883789 ] [ 1.9999996404418945 , 3.9999997615814205 , 2.9999999038604734 ] [ 1.9999999644302369 , 3.9999999701976776 , 2.9999999917325595 ] [ 1.9999999946162794 , 3.9999999962747097 , 2.99999999859157 ] [ 1.9999999994207849 , 3.9999999995343387 , 2.9999999998614464 ] [ 1.9999999999182232 , 3.999999999941793 , 2.999999999978931 ] [ 1.9999999999907154 , 3.999999999992724 , 2.9999999999977414 ] [ 1.9999999999987457 , 3.9999999999990905 , 2.9999999999996803 ] [ 1.9999999999998526 , 3.9999999999998863 , 2.9999999999999636 ] [ 1.9999999999999807 , 3.999999999999986 , 2.999999999999995 ] [ 1.9999999999999978 , 3.9999999999999987 , 2.9999999999999996 ] [ 1.9999999999999996 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ]","title":"METODE ELIMINASI GAUSS, JACOBI, DAN SEIDEL"},{"location":"customization/#metode-eliminasi-gauss-jacobi-dan-seidel","text":"","title":"METODE ELIMINASI GAUSS, JACOBI DAN SEIDEL"},{"location":"customization/#metode-eliminasi-gauss","text":"Metode eliminasi gauss merupakan metode yang dikembangkan dari metode eliminasi, yaitu dengan menghilangkan atau mengurangi jumlah variabel sehingga dapat diperoleh nilai dari suati variabel bebas. Adapun konsep dari metode eliminasi gauss yaitu mengubah matriks pada bagian kiri menjadi matriks segitiga atas atau bawah dengan menggunakan OBE (Operasi Baris Elementer) . Sehingga penyelesaiannya dapat diperoleh dengan : Menukar posisi dua buah persamaan (dua baris matriks augmented) Menambah sebuah persamaan (baris matriks augmented) dengan suatu kelipatan persamaan lain (baris lain) Mengalihkan sebuah persamaan (baris matriks augmented) dengan sembarang konstanta taknol. Berikut formula untuk eliminasi maju ( Forward Elimination ) a_{ij} = a_{ij}-(\\frac {a_ik}{a_kk}) a_{kj} ,(k<=j<=n) a_{ij} = a_{ij}-(\\frac {a_ik}{a_kk}) a_{kj} ,(k<=j<=n) Berikut formula untuk eliminasi mundur ( Backward Substitution ) x_{n} = \\frac{b_{n}}{a_{n,n}} x_{n} = \\frac{b_{n}}{a_{n,n}} x_{n-1} = \\frac {b_{n-1n}x_{n}}{a_{n-1,n-1}} x_{n-1} = \\frac {b_{n-1n}x_{n}}{a_{n-1,n-1}} x_{n-2} = \\frac{b_{n-2}-a_{n-2,n}x_{n}-a_{n-2,n-1}x_{n-1}}{a_{n-2,n-2}} x_{n-2} = \\frac{b_{n-2}-a_{n-2,n}x_{n}-a_{n-2,n-1}x_{n-1}}{a_{n-2,n-2}} .................... .................... x_{i}=\\frac{b_{i}-\\sum_{j=i+1}^{n} a_{i.j}x_{j}}{a_i,j} x_{i}=\\frac{b_{i}-\\sum_{j=i+1}^{n} a_{i.j}x_{j}}{a_i,j} Source Code untuk Eliminasi Gauss import numpy as np #Definisi Matrix A = [] B = [] n = int ( input ( \"Masukkan ukuran Matrix: \" )) for i in range ( n ): baris = [] for i in range ( n ): a = int ( input ( \"Masukkan Nilai: \" )) baris . append ( a ) A . append ( baris ) for i in range ( n ): h = int ( input ( \"Masukkan Hasil: \" )) B . append ( h ) Matrix = np . array ( A , float ) Hasil = np . array ( B , float ) n = len ( Matrix ) #Eliminasi Gauss for k in range ( 0 , n - 1 ): for i in range ( k + 1 , n ): if Matrix [ i , k ] != 0 : lam = Matrix [ i , k ] / Matrix [ k , k ] Matrix [ i , k : n ] = Matrix [ i , k : n ] - ( Matrix [ k , k : n ] * lam ) Hasil [ i ] = Hasil [ i ] - ( Hasil [ k ] * lam ) print ( \"Matrix A : \" , ' \\n ' , Matrix ) #Subtitution x = np . zeros ( n , float ) for m in range ( n - 1 , - 1 , - 1 ): x [ m ] = ( Hasil [ m ] - np . dot ( Matrix [ m , m + 1 : n ], x [ m + 1 : n ])) / Matrix [ m , m ] print ( 'Nilai X ' , m + 1 , '=' , x [ m ]) Output: Masukkan ukuran Matrix : 3 Masukkan Nilai : 2 Masukkan Nilai : - 2 Masukkan Nilai : 5 Masukkan Nilai : 1 Masukkan Nilai : 5 Masukkan Nilai : 2 Masukkan Nilai : 4 Masukkan Nilai : 5 Masukkan Nilai : 2 Masukkan Hasil : 12 Masukkan Hasil : 3 Masukkan Hasil : - 4 Matrix A : [[ 2. - 2. 5. ] [ 0. 6. - 0.5 ] [ 0. 0. - 7.25 ]] Nilai X 3 = 3.2413793103448274 Nilai X 2 = - 0.2298850574712644 Nilai X 1 = - 2.333333333333332","title":"Metode Eliminasi Gauss"},{"location":"customization/#metode-iterasi-jacobi","text":"Metode Iterasi Jacobi merupakan salah satu bidang analisis numerik yang digunakan untuk menyelesaikan permasalahan Persamaan Linier dan sering dijumpai dalam berbagai disiplin ilmu. Metode Iterasi Jacobi merupakan salah satu metode tak langsung, yaitu bermula dari suatu hampiran penyelesaian awal dan kemudian berusaha memperbaiki hampiran dalam tak berhingga namun langkah konvergen. Metode Iterasi Jacobi ini digunakan untuk menyelesaikan persamaan Linier berukuran besar dan proporsi koefisien nolnya besar. Berikut bentuk umum iterasi Jacobi : x_{i} = \\frac{1}{a_{ii}}(b_{i} - \\sum_{j,i}^{n}a_{ij}x_{j}^{(k-1)}), i = 1,2,...,n;k = 1,2,3,..., x_{i} = \\frac{1}{a_{ii}}(b_{i} - \\sum_{j,i}^{n}a_{ij}x_{j}^{(k-1)}), i = 1,2,...,n;k = 1,2,3,..., Suatu matriks A berukuran n x n dikatakan dominan secara diagonal apabila : |a_{ii}|>|a_{i,1}|+...+|a_{i,i-1}|+|a_{i,i+1}|+...+|a_{in}| , i=1,2,...,n. |a_{ii}|>|a_{i,1}|+...+|a_{i,i-1}|+|a_{i,i+1}|+...+|a_{in}| , i=1,2,...,n. Source Code untuk Metode Iterasi Jacobi from pprint import pprint from numpy import array , zeros , diag , diagflat , dot import numpy as np def jacobi ( A , b , N = 25 , x = None ): #Membuat iniial guess if x is None : x = zeros ( len ( A [ 0 ])) #Membuat vektor dari elemen matrix A D = diag ( A ) R = A - diagflat ( D ) #Iterasi for i in range ( N ): x = ( b - dot ( R , x )) / D return x Mat1 = [] Mat2 = [] n = int ( input ( \"Masukkan ukuran Matrix: \" )) for i in range ( n ): baris = [] for i in range ( n ): a = int ( input ( \"Masukkan Nilai: \" )) baris . append ( a ) Mat1 . append ( baris ) for i in range ( n ): h = int ( input ( \"Masukkan Hasil: \" )) Mat2 . append ( h ) A = array ( Mat1 , float ) b = array ( Mat2 , float ) x = len ( Mat1 ) guess = np . zeros ( x , float ) sol = jacobi ( A , b , N = 25 , x = guess ) print ( \"A:\" ) pprint ( A ) print ( \"b:\" ) pprint ( b ) print ( \"x:\" ) pprint ( sol ) Output: Masukkan ukuran Matrix : 3 Masukkan Nilai : 3 Masukkan Nilai : 1 Masukkan Nilai : - 1 Masukkan Nilai : 4 Masukkan Nilai : 7 Masukkan Nilai : - 3 Masukkan Nilai : 2 Masukkan Nilai : - 2 Masukkan Nilai : 5 Masukkan Hasil : 5 Masukkan Hasil : 20 Masukkan Hasil : 10 A : array ([[ 3. , 1. , - 1. ], [ 4. , 7. , - 3. ], [ 2. , - 2. , 5. ]]) b : array ([ 5. , 20. , 10. ]) x : array ([ 1.50602413 , 3.13253016 , 2.6506024 ])","title":"Metode Iterasi Jacobi"},{"location":"customization/#metode-iterasi-gauss-seidel","text":"Metode iterasi gauss seidel digunakan untuk menyelesaikan sistem persamaan linear (SPL) berukuran besar dan proporsi koefisien nolnya besar, seperti sistem-sistem yang banyak ditemukan dalam sistem persamaan diferensial. Metode iterasi Gauss-Seidel dikembangkan dari gagasan metode iterasi pada solusi persamaan non linier. Metode ini dapat memperkecil sesatan pembulatan karena dapat meneruskan iterasi sampai solusinya seteliti mungkin sesuai dengan batas yang ditentukan. Berikut bentuk umum iterasi Gauss-Seidel. x_{i} = \\frac{1}{a_{ii}}(b_{i}-\\sum_{j=1}^{i-1}a_{ij}x_{j}^{(k)}-\\sum_{j=i+1}^{n}a_{ij}x_{j}^{(k-1)}), i = 1,2,...,n;k=1,2,3,... x_{i} = \\frac{1}{a_{ii}}(b_{i}-\\sum_{j=1}^{i-1}a_{ij}x_{j}^{(k)}-\\sum_{j=i+1}^{n}a_{ij}x_{j}^{(k-1)}), i = 1,2,...,n;k=1,2,3,... Source Code untuk Metode Iterasi Gauss Seidel def seidel ( a , x , b ): #Mencari Panjang Matrix n = len ( a ) for j in range ( 0 , n ): d = b [ j ] #Menghitung xi, yi, zi for i in range ( 0 , n ): if ( j != i ): d -= a [ j ][ i ] * x [ i ] x [ j ] = d / a [ j ][ j ] #Solusi return x m = int ( input ( \"Masukkan Panjang Matrix: \" )) a = [] b = [] for k in range ( m ): mat1 = [] for i in range ( m ): l = float ( input ( \"Masukkan a\" + str ( k + 1 ) + \",\" + str ( i + 1 ) + \": \" )) mat1 . append ( l ) h = float ( input ( \"Masukkan Hasil: \" )) b . append ( h ) a . append ( mat1 ) n = 3 x = [ 0 , 0 , 0 ] print ( x ) for i in range ( 0 , 100 ): x = seidel ( a , x , b ) print ( x ) Output: Masukkan Panjang Matrix : 3 Masukkan a1 , 1 : 4 Masukkan a1 , 2 : - 1 Masukkan a1 , 3 : 1 Masukkan Hasil : 7 Masukkan a2 , 1 : 4 Masukkan a2 , 2 : - 8 Masukkan a2 , 3 : 1 Masukkan Hasil : - 21 Masukkan a3 , 1 : - 2 Masukkan a3 , 2 : 1 Masukkan a3 , 3 : 5 Masukkan Hasil : 15 [ 0 , 0 , 0 ] [ 1.75 , 3.5 , 3.0 ] [ 1.875 , 3.9375 , 2.9625 ] [ 1.99375 , 3.9921875 , 2.9990625 ] [ 1.99828125 , 3.9990234375 , 2.9995078125 ] [ 1.99987890625 , 3.9998779296875 , 2.9999759765625003 ] [ 1.99997548828125 , 3.9999847412109375 , 2.999993247070312 ] [ 1.9999978735351562 , 3.9999980926513667 , 2.999999530883789 ] [ 1.9999996404418945 , 3.9999997615814205 , 2.9999999038604734 ] [ 1.9999999644302369 , 3.9999999701976776 , 2.9999999917325595 ] [ 1.9999999946162794 , 3.9999999962747097 , 2.99999999859157 ] [ 1.9999999994207849 , 3.9999999995343387 , 2.9999999998614464 ] [ 1.9999999999182232 , 3.999999999941793 , 2.999999999978931 ] [ 1.9999999999907154 , 3.999999999992724 , 2.9999999999977414 ] [ 1.9999999999987457 , 3.9999999999990905 , 2.9999999999996803 ] [ 1.9999999999998526 , 3.9999999999998863 , 2.9999999999999636 ] [ 1.9999999999999807 , 3.999999999999986 , 2.999999999999995 ] [ 1.9999999999999978 , 3.9999999999999987 , 2.9999999999999996 ] [ 1.9999999999999996 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ]","title":"Metode Iterasi Gauss Seidel"},{"location":"getting-started/","text":"DERET MACLAURIN \u00b6 Deret MacLaurin merupakan representasi fungsi matematika sebagai jumlah tak hingga dari suku-suku yang nilainya dihitung dari turunan fungsi tersebut yang terpusat di titik nol. Deret MacLaurin disebut juga Deret Taylor Baku. Berikut merupakan formula Deret MacLaurin. f(x) = f(0) + \\frac {f^1(0)}{1!}x + \\frac {f^2(0)}{2!}x^2 + \\frac {f^3(0)}{3!}x^3 + \\frac {f^4(0)}{4!}x^4 + ....... +\\frac{f^n(0)}{n!}x^n f(x) = f(0) + \\frac {f^1(0)}{1!}x + \\frac {f^2(0)}{2!}x^2 + \\frac {f^3(0)}{3!}x^3 + \\frac {f^4(0)}{4!}x^4 + ....... +\\frac{f^n(0)}{n!}x^n TUGAS 1 \u00b6 Jika diketahui suatu fungsi f(a)=e^{2x} f(a)=e^{2x} dengan x = 4. Carilah selisih antara turunan dengan menggunakan metode MacLaurin sehingga nilai e<0,001. Jawab : Deret MacLaurin dari e^2x : Langkah pertama yaitu menentukan terlebih dahulu turunan dari e^2x sebagai berikut. f(a)=e^{2x} f(a)=e^{2x} f^{1}(a) = 2e^{2x} f^{1}(a) = 2e^{2x} f^{2}(a)=4e^{2x} f^{2}(a)=4e^{2x} f^{3}(a) = 8e^{2x} f^{3}(a) = 8e^{2x} f^{4}(a) = 16e^{2x} f^{4}(a) = 16e^{2x} .....dst. .....dst. Langkah kedua yaitu masukkan hasil turunan ke dalam formula deret MacLaurin f(x) = f(0) + \\frac {f^1(0)}{1!}x + \\frac {f^2(0)}{2!}x^2 + \\frac {f^3(0)}{3!}x^3 + \\frac {f^4(0)}{4!}x^4 + ....... +\\frac{f^n(0)}{n!}x^n f(x) = f(0) + \\frac {f^1(0)}{1!}x + \\frac {f^2(0)}{2!}x^2 + \\frac {f^3(0)}{3!}x^3 + \\frac {f^4(0)}{4!}x^4 + ....... +\\frac{f^n(0)}{n!}x^n f(x) = e^0 + \\frac {2e^0}{1!}(4) + \\frac {4e^0}{2!}(4)^2 + \\frac {8e^0}{3!}(4)^3 + \\frac {16e^0}{4!}(4)^4 + ....... + \\frac{f^n(0)}{n!}x^n f(x) = e^0 + \\frac {2e^0}{1!}(4) + \\frac {4e^0}{2!}(4)^2 + \\frac {8e^0}{3!}(4)^3 + \\frac {16e^0}{4!}(4)^4 + ....... + \\frac{f^n(0)}{n!}x^n Langkah ketiga yaitu substitusikan nilai x = 4 pada langkah kedua hingga menghasilkan nilai e<0,001. Berikut merupakan source code untuk menyelesaikan soal e^2x pada tugas 1. \u00b6 import math error = 0.001 def f ( x ) : f_turunan = 1 current = i = 0 iteration = True while iteration : old = current current += ( f_turunan * ( x ** i )) / math . factorial ( i ) print ( 'iterasi ke-' , i , '=' , f_turunan , '(e^2x=' , current , ') (Ea=' , current - old , ')' ) if current - old < error : iteration = False else : f_turunan *= 2 i += 1 f ( 4 ) Output : iterasi ke - 0 = 1 ( e ^ 2 x = 1.0 ) ( Ea = 1.0 ) iterasi ke - 1 = 2 ( e ^ 2 x = 9.0 ) ( Ea = 8.0 ) iterasi ke - 2 = 4 ( e ^ 2 x = 41.0 ) ( Ea = 32.0 ) iterasi ke - 3 = 8 ( e ^ 2 x = 126.33333333333333 ) ( Ea = 85.33333333333333 ) iterasi ke - 4 = 16 ( e ^ 2 x = 297.0 ) ( Ea = 170.66666666666669 ) iterasi ke - 5 = 32 ( e ^ 2 x = 570.0666666666666 ) ( Ea = 273.0666666666666 ) iterasi ke - 6 = 64 ( e ^ 2 x = 934.1555555555556 ) ( Ea = 364.08888888888896 ) iterasi ke - 7 = 128 ( e ^ 2 x = 1350.2571428571428 ) ( Ea = 416.1015873015872 ) iterasi ke - 8 = 256 ( e ^ 2 x = 1766.35873015873 ) ( Ea = 416.1015873015872 ) iterasi ke - 9 = 512 ( e ^ 2 x = 2136.226807760141 ) ( Ea = 369.8680776014112 ) iterasi ke - 10 = 1024 ( e ^ 2 x = 2432.12126984127 ) ( Ea = 295.89446208112895 ) iterasi ke - 11 = 2048 ( e ^ 2 x = 2647.317242263909 ) ( Ea = 215.195972422639 ) iterasi ke - 12 = 4096 ( e ^ 2 x = 2790.781223879002 ) ( Ea = 143.46398161509296 ) iterasi ke - 13 = 8192 ( e ^ 2 x = 2879.0667510267513 ) ( Ea = 88.28552714774924 ) iterasi ke - 14 = 16384 ( e ^ 2 x = 2929.515623682608 ) ( Ea = 50.448872655856576 ) iterasi ke - 15 = 32768 ( e ^ 2 x = 2956.4216890990647 ) ( Ea = 26.90606541645684 ) iterasi ke - 16 = 65536 ( e ^ 2 x = 2969.874721807293 ) ( Ea = 13.45303270822842 ) iterasi ke - 17 = 131072 ( e ^ 2 x = 2976.2055607288125 ) ( Ea = 6.330838921519444 ) iterasi ke - 18 = 262144 ( e ^ 2 x = 2979.0192669161543 ) ( Ea = 2.8137061873417224 ) iterasi ke - 19 = 524288 ( e ^ 2 x = 2980.2039853108245 ) ( Ea = 1.184718394670199 ) iterasi ke - 20 = 1048576 ( e ^ 2 x = 2980.6778726686925 ) ( Ea = 0.47388735786807956 ) iterasi ke - 21 = 2097152 ( e ^ 2 x = 2980.8584011859757 ) ( Ea = 0.18052851728316455 ) iterasi ke - 22 = 4194304 ( e ^ 2 x = 2980.924047919533 ) ( Ea = 0.06564673355751438 ) iterasi ke - 23 = 8388608 ( e ^ 2 x = 2980.946881565988 ) ( Ea = 0.022833646454728296 ) iterasi ke - 24 = 16777216 ( e ^ 2 x = 2980.9544927814727 ) ( Ea = 0.0076112154847578495 ) iterasi ke - 25 = 33554432 ( e ^ 2 x = 2980.9569283704277 ) ( Ea = 0.0024355889549951826 ) iterasi ke - 26 = 67108864 ( e ^ 2 x = 2980.957677782414 ) ( Ea = 0.0007494119863622473 ) Dari hasil running code di atas dapat disimpulkan bahwa nilai e yang mendekati nilai sesungguhnya berada pada iterasi ke-27 dengan nilai 2980.957677782414.","title":"DERET MACLAURIN"},{"location":"getting-started/#deret-maclaurin","text":"Deret MacLaurin merupakan representasi fungsi matematika sebagai jumlah tak hingga dari suku-suku yang nilainya dihitung dari turunan fungsi tersebut yang terpusat di titik nol. Deret MacLaurin disebut juga Deret Taylor Baku. Berikut merupakan formula Deret MacLaurin. f(x) = f(0) + \\frac {f^1(0)}{1!}x + \\frac {f^2(0)}{2!}x^2 + \\frac {f^3(0)}{3!}x^3 + \\frac {f^4(0)}{4!}x^4 + ....... +\\frac{f^n(0)}{n!}x^n f(x) = f(0) + \\frac {f^1(0)}{1!}x + \\frac {f^2(0)}{2!}x^2 + \\frac {f^3(0)}{3!}x^3 + \\frac {f^4(0)}{4!}x^4 + ....... +\\frac{f^n(0)}{n!}x^n","title":"DERET MACLAURIN"},{"location":"getting-started/#tugas-1","text":"Jika diketahui suatu fungsi f(a)=e^{2x} f(a)=e^{2x} dengan x = 4. Carilah selisih antara turunan dengan menggunakan metode MacLaurin sehingga nilai e<0,001. Jawab : Deret MacLaurin dari e^2x : Langkah pertama yaitu menentukan terlebih dahulu turunan dari e^2x sebagai berikut. f(a)=e^{2x} f(a)=e^{2x} f^{1}(a) = 2e^{2x} f^{1}(a) = 2e^{2x} f^{2}(a)=4e^{2x} f^{2}(a)=4e^{2x} f^{3}(a) = 8e^{2x} f^{3}(a) = 8e^{2x} f^{4}(a) = 16e^{2x} f^{4}(a) = 16e^{2x} .....dst. .....dst. Langkah kedua yaitu masukkan hasil turunan ke dalam formula deret MacLaurin f(x) = f(0) + \\frac {f^1(0)}{1!}x + \\frac {f^2(0)}{2!}x^2 + \\frac {f^3(0)}{3!}x^3 + \\frac {f^4(0)}{4!}x^4 + ....... +\\frac{f^n(0)}{n!}x^n f(x) = f(0) + \\frac {f^1(0)}{1!}x + \\frac {f^2(0)}{2!}x^2 + \\frac {f^3(0)}{3!}x^3 + \\frac {f^4(0)}{4!}x^4 + ....... +\\frac{f^n(0)}{n!}x^n f(x) = e^0 + \\frac {2e^0}{1!}(4) + \\frac {4e^0}{2!}(4)^2 + \\frac {8e^0}{3!}(4)^3 + \\frac {16e^0}{4!}(4)^4 + ....... + \\frac{f^n(0)}{n!}x^n f(x) = e^0 + \\frac {2e^0}{1!}(4) + \\frac {4e^0}{2!}(4)^2 + \\frac {8e^0}{3!}(4)^3 + \\frac {16e^0}{4!}(4)^4 + ....... + \\frac{f^n(0)}{n!}x^n Langkah ketiga yaitu substitusikan nilai x = 4 pada langkah kedua hingga menghasilkan nilai e<0,001.","title":"TUGAS 1"},{"location":"getting-started/#berikut-merupakan-source-code-untuk-menyelesaikan-soal-e2x-pada-tugas-1","text":"import math error = 0.001 def f ( x ) : f_turunan = 1 current = i = 0 iteration = True while iteration : old = current current += ( f_turunan * ( x ** i )) / math . factorial ( i ) print ( 'iterasi ke-' , i , '=' , f_turunan , '(e^2x=' , current , ') (Ea=' , current - old , ')' ) if current - old < error : iteration = False else : f_turunan *= 2 i += 1 f ( 4 ) Output : iterasi ke - 0 = 1 ( e ^ 2 x = 1.0 ) ( Ea = 1.0 ) iterasi ke - 1 = 2 ( e ^ 2 x = 9.0 ) ( Ea = 8.0 ) iterasi ke - 2 = 4 ( e ^ 2 x = 41.0 ) ( Ea = 32.0 ) iterasi ke - 3 = 8 ( e ^ 2 x = 126.33333333333333 ) ( Ea = 85.33333333333333 ) iterasi ke - 4 = 16 ( e ^ 2 x = 297.0 ) ( Ea = 170.66666666666669 ) iterasi ke - 5 = 32 ( e ^ 2 x = 570.0666666666666 ) ( Ea = 273.0666666666666 ) iterasi ke - 6 = 64 ( e ^ 2 x = 934.1555555555556 ) ( Ea = 364.08888888888896 ) iterasi ke - 7 = 128 ( e ^ 2 x = 1350.2571428571428 ) ( Ea = 416.1015873015872 ) iterasi ke - 8 = 256 ( e ^ 2 x = 1766.35873015873 ) ( Ea = 416.1015873015872 ) iterasi ke - 9 = 512 ( e ^ 2 x = 2136.226807760141 ) ( Ea = 369.8680776014112 ) iterasi ke - 10 = 1024 ( e ^ 2 x = 2432.12126984127 ) ( Ea = 295.89446208112895 ) iterasi ke - 11 = 2048 ( e ^ 2 x = 2647.317242263909 ) ( Ea = 215.195972422639 ) iterasi ke - 12 = 4096 ( e ^ 2 x = 2790.781223879002 ) ( Ea = 143.46398161509296 ) iterasi ke - 13 = 8192 ( e ^ 2 x = 2879.0667510267513 ) ( Ea = 88.28552714774924 ) iterasi ke - 14 = 16384 ( e ^ 2 x = 2929.515623682608 ) ( Ea = 50.448872655856576 ) iterasi ke - 15 = 32768 ( e ^ 2 x = 2956.4216890990647 ) ( Ea = 26.90606541645684 ) iterasi ke - 16 = 65536 ( e ^ 2 x = 2969.874721807293 ) ( Ea = 13.45303270822842 ) iterasi ke - 17 = 131072 ( e ^ 2 x = 2976.2055607288125 ) ( Ea = 6.330838921519444 ) iterasi ke - 18 = 262144 ( e ^ 2 x = 2979.0192669161543 ) ( Ea = 2.8137061873417224 ) iterasi ke - 19 = 524288 ( e ^ 2 x = 2980.2039853108245 ) ( Ea = 1.184718394670199 ) iterasi ke - 20 = 1048576 ( e ^ 2 x = 2980.6778726686925 ) ( Ea = 0.47388735786807956 ) iterasi ke - 21 = 2097152 ( e ^ 2 x = 2980.8584011859757 ) ( Ea = 0.18052851728316455 ) iterasi ke - 22 = 4194304 ( e ^ 2 x = 2980.924047919533 ) ( Ea = 0.06564673355751438 ) iterasi ke - 23 = 8388608 ( e ^ 2 x = 2980.946881565988 ) ( Ea = 0.022833646454728296 ) iterasi ke - 24 = 16777216 ( e ^ 2 x = 2980.9544927814727 ) ( Ea = 0.0076112154847578495 ) iterasi ke - 25 = 33554432 ( e ^ 2 x = 2980.9569283704277 ) ( Ea = 0.0024355889549951826 ) iterasi ke - 26 = 67108864 ( e ^ 2 x = 2980.957677782414 ) ( Ea = 0.0007494119863622473 ) Dari hasil running code di atas dapat disimpulkan bahwa nilai e yang mendekati nilai sesungguhnya berada pada iterasi ke-27 dengan nilai 2980.957677782414.","title":"Berikut merupakan source code untuk menyelesaikan soal e^2x pada tugas 1."},{"location":"license/","text":"METODE TRAPESIUM REKURSIF \u00b6 Pengertian Metode Trapesium Rekursif \u00b6 Metode trapesium rekursif merupakan suatu metode pengintegralan dalam analisis numerik.di dalam Kalkulus, integral tentu didefinisikan sebagai sebuah limit jumlah Riemann. Selanjutnya,menurut Teorema Dasar Kalkulus integral tersebut dapat dihitung dengan rumus sebagai berikut. \\int_{a}^{b} f(x) dx = F(b) - F(a) \\int_{a}^{b} f(x) dx = F(b) - F(a) Dengan F(x) adalah antiderivatif f(x) (yakni F\u2019(x)=f(x) ). Banyak integral tentu yang dapat dihitung dengan rumus tesebut, namun demikian, tidak sedikit integral tentu yang tidak dapat dihitung dengan rumus di atas, hal itu dikarenakan integran f(x) tidak mempunyai antiderivatif yang dapat dinyatakan dalam fungsi-fungsi elementer. Dalam hal ini perhitungan yang dapat dilakukan adalah secara numerik. Integrasi numerik merupakan suatu alat utama yang digunakan para ilmuwan untuk mendapatkan nilai-nilai hampiran untuk integral tentu yang tidak dapat diselesaikan secara analitik. Dalam mendapatkan nilai-nilai hampiran integral tentu, digunakan banyak metode, salah satu metode yang dapat digunakan adalah Aturan Trapesium Rekursif. Aturan Trapesium Rekursif \u00b6 Misalkan f adalah suatu fungsi yang terdefinisi pada [a,b]. Misalkan a = x_{0} < x_{1} < x_{2}< .....< x_{n} a = x_{0} < x_{1} < x_{2}< .....< x_{n} suatu partisi sedemikian sehingga x_{k} = x_{0} + kh x_{k} = x_{0} + kh dengan h = (b-a)/n untuk k = 0, 1, 2, 3, . . . . n. Perhatikan aturan trapesium untuk fungsi f terhadap partisi di atas (untuk keperluan pembahasan pada bagian ini, kita gunakan notasi kuadratur dengan menyertakan cacah dan lebar subinterval), T_{n} (f,h) = \\frac{h}{2}(f_{0} + 2f_{1} + 2f_{2} +....+2f_{n-1} + f_{n}) T_{n} (f,h) = \\frac{h}{2}(f_{0} + 2f_{1} + 2f_{2} +....+2f_{n-1} + f_{n}) = \\frac{h}{2} (f_{0}+f_{n}) + h(f_{1}+f_{2}+....+f_{(n-1)}) = \\frac{h}{2} (f_{0}+f_{n}) + h(f_{1}+f_{2}+....+f_{(n-1)}) = \\frac{h}{2} (f_{a}+f_{b}) + h\\sum_{k=1}^{n-1} f_{k}......(1) = \\frac{h}{2} (f_{a}+f_{b}) + h\\sum_{k=1}^{n-1} f_{k}......(1) Jika lebar setiap subinterval diperkecil setengahnya, maka didapat T_{2n} (f, \\frac{h}{2}) = \\frac{h}{4} (f_{0}+f_{2n}) + \\frac{h}{2} \\sum_{k=1}^{2n-1} f_{k} T_{2n} (f, \\frac{h}{2}) = \\frac{h}{4} (f_{0}+f_{2n}) + \\frac{h}{2} \\sum_{k=1}^{2n-1} f_{k} = \\frac{h}{4} (f_{0}+f_{2n}) + \\frac{h}{2} \\sum_{j=1}^{n-1} f_{2j} + \\frac{h}{2} \\sum_{j=1}^{n} f_{2j-1}.....(2) = \\frac{h}{4} (f_{0}+f_{2n}) + \\frac{h}{2} \\sum_{j=1}^{n-1} f_{2j} + \\frac{h}{2} \\sum_{j=1}^{n} f_{2j-1}.....(2) T_{2n} (f, \\frac{h}{2}) = \\frac{T_{n}(f,h)}{2} + \\frac{h}{2} \\sum_{nj=1}^{n} f_{2j-1}......(3) T_{2n} (f, \\frac{h}{2}) = \\frac{T_{n}(f,h)}{2} + \\frac{h}{2} \\sum_{nj=1}^{n} f_{2j-1}......(3) pada (1) berlaku fk = f(x0+kh), sedangkan pada (2) berlaku fk = f(x0+kh/2), sehingga f2k pada (2) sama dengan fk pada (1). Rumus (3) disebut rumus trapesium rekursif. Rumus ini memungkinkan penggunaan aturan trapesium majemuk secara efisien, tanpa harus menghitung ulang nilai-nilai fungsi di beberapa absis yang sudah dihitung sebelumnya. Untuk h = (b-a), dan n = 1, 2, 4, 8, 16 . . . . atau n = 2^{0}, 2^{1}, 2^{2}, 2^{3}, 2^{4}, ..... 2^{k}.... n = 2^{0}, 2^{1}, 2^{2}, 2^{3}, 2^{4}, ..... 2^{k}.... Kita akan mendapatkan barisan aturan trapesium T_{0}, T_{1}, T_{2}, T_{3}.....T_{k},..... dengan, T_{0}, T_{1}, T_{2}, T_{3}.....T_{k},..... dengan, T_{0} = T_{1} (f, h) = \\frac{h}{2} (f(a)+f(b)) T_{0} = T_{1} (f, h) = \\frac{h}{2} (f(a)+f(b)) T_{k} = T_{2k} (f, \\frac{h}{2}), k = 1, 2, 3.... T_{k} = T_{2k} (f, \\frac{h}{2}), k = 1, 2, 3.... yang memenuhi hubungan T_{k+1} = \\frac{T_{k}}{2} + \\frac{h}{2^{k+1}} \\sum_{j=1}^{2^{k}} f_{2j-1} T_{k+1} = \\frac{T_{k}}{2} + \\frac{h}{2^{k+1}} \\sum_{j=1}^{2^{k}} f_{2j-1} dengan f1 = f(a+i(\\frac{h}{2^{k+1}})..... (4) f1 = f(a+i(\\frac{h}{2^{k+1}})..... (4) Berikut merupakan implementasi program metode trapesium rekursif. def fungsi ( x ): y = 1 / ( 1 + x ) return y print ( \"fungsi yang digunakan adalah\" ) print ( \"\" ) print ( \" \\t\\t \" , \"f(x) = 1/(1+x)\" ) print ( \"\" ) a = float ( input ( \"masukkan batas bawah integral : \" )) b = float ( input ( \"masukkan batas atas integral : \" )) c = int ( input ( \"masukkan n : \" )) eror = [] print ( \"\" ) print ( \"----------------Hasil Integrasi-----------------\" ) print ( \"iterasi\" , \" \\t \" , \"n\" , \" \\t\\t \" , \"Trapezoid\" ) for iterasi in range ( 0 , c ): n = 2 ** iterasi h = ( b - a ) / n xi = a y = 0 for i in range ( 1 , n ): xi = xi + h y += fungsi ( xi ) trap = (( h ) * ( fungsi ( a ) + ( 2 * y ) + fungsi ( b ))) / 2 eror . append ( trap ) print ( iterasi + 1 , \" \\t\\t \" , n , \" \\t\\t \" , trap ) print ( eror [ iterasi - 1 ]) print ( eror [ iterasi ]) hasil = ( eror [ iterasi - 1 ] - eror [ iterasi ]) print ( hasil ) print ( \"estimasi error : \" + str ( hasil )) Output: fungsi yang digunakan adalah f ( x ) = 1 / ( 1 + x ) masukkan batas bawah integral : 2 masukkan batas atas integral : 5 masukkan n : 3 ---------------- Hasil Integrasi ----------------- iterasi n Trapezoid 1 1 0.75 2 2 0.7083333333333333 3 4 0.6970238095238095 0.7083333333333333 0.6970238095238095 0.01130952380952377 estimasi error : 0.01130952380952377 Dari hasil output diatas dapat disimpulkan untuk fungsi f(x) = 1/(1+x) dengan batas bawah integral adalah 2 dan batas atasnya 5, dengan n = 3, proses iterasi menghasilkan estimasi error 0.01130952380952377.","title":"METODE RECURSIVE TRAPEZOID"},{"location":"license/#metode-trapesium-rekursif","text":"","title":"METODE TRAPESIUM REKURSIF"},{"location":"license/#pengertian-metode-trapesium-rekursif","text":"Metode trapesium rekursif merupakan suatu metode pengintegralan dalam analisis numerik.di dalam Kalkulus, integral tentu didefinisikan sebagai sebuah limit jumlah Riemann. Selanjutnya,menurut Teorema Dasar Kalkulus integral tersebut dapat dihitung dengan rumus sebagai berikut. \\int_{a}^{b} f(x) dx = F(b) - F(a) \\int_{a}^{b} f(x) dx = F(b) - F(a) Dengan F(x) adalah antiderivatif f(x) (yakni F\u2019(x)=f(x) ). Banyak integral tentu yang dapat dihitung dengan rumus tesebut, namun demikian, tidak sedikit integral tentu yang tidak dapat dihitung dengan rumus di atas, hal itu dikarenakan integran f(x) tidak mempunyai antiderivatif yang dapat dinyatakan dalam fungsi-fungsi elementer. Dalam hal ini perhitungan yang dapat dilakukan adalah secara numerik. Integrasi numerik merupakan suatu alat utama yang digunakan para ilmuwan untuk mendapatkan nilai-nilai hampiran untuk integral tentu yang tidak dapat diselesaikan secara analitik. Dalam mendapatkan nilai-nilai hampiran integral tentu, digunakan banyak metode, salah satu metode yang dapat digunakan adalah Aturan Trapesium Rekursif.","title":"Pengertian Metode Trapesium Rekursif"},{"location":"license/#aturan-trapesium-rekursif","text":"Misalkan f adalah suatu fungsi yang terdefinisi pada [a,b]. Misalkan a = x_{0} < x_{1} < x_{2}< .....< x_{n} a = x_{0} < x_{1} < x_{2}< .....< x_{n} suatu partisi sedemikian sehingga x_{k} = x_{0} + kh x_{k} = x_{0} + kh dengan h = (b-a)/n untuk k = 0, 1, 2, 3, . . . . n. Perhatikan aturan trapesium untuk fungsi f terhadap partisi di atas (untuk keperluan pembahasan pada bagian ini, kita gunakan notasi kuadratur dengan menyertakan cacah dan lebar subinterval), T_{n} (f,h) = \\frac{h}{2}(f_{0} + 2f_{1} + 2f_{2} +....+2f_{n-1} + f_{n}) T_{n} (f,h) = \\frac{h}{2}(f_{0} + 2f_{1} + 2f_{2} +....+2f_{n-1} + f_{n}) = \\frac{h}{2} (f_{0}+f_{n}) + h(f_{1}+f_{2}+....+f_{(n-1)}) = \\frac{h}{2} (f_{0}+f_{n}) + h(f_{1}+f_{2}+....+f_{(n-1)}) = \\frac{h}{2} (f_{a}+f_{b}) + h\\sum_{k=1}^{n-1} f_{k}......(1) = \\frac{h}{2} (f_{a}+f_{b}) + h\\sum_{k=1}^{n-1} f_{k}......(1) Jika lebar setiap subinterval diperkecil setengahnya, maka didapat T_{2n} (f, \\frac{h}{2}) = \\frac{h}{4} (f_{0}+f_{2n}) + \\frac{h}{2} \\sum_{k=1}^{2n-1} f_{k} T_{2n} (f, \\frac{h}{2}) = \\frac{h}{4} (f_{0}+f_{2n}) + \\frac{h}{2} \\sum_{k=1}^{2n-1} f_{k} = \\frac{h}{4} (f_{0}+f_{2n}) + \\frac{h}{2} \\sum_{j=1}^{n-1} f_{2j} + \\frac{h}{2} \\sum_{j=1}^{n} f_{2j-1}.....(2) = \\frac{h}{4} (f_{0}+f_{2n}) + \\frac{h}{2} \\sum_{j=1}^{n-1} f_{2j} + \\frac{h}{2} \\sum_{j=1}^{n} f_{2j-1}.....(2) T_{2n} (f, \\frac{h}{2}) = \\frac{T_{n}(f,h)}{2} + \\frac{h}{2} \\sum_{nj=1}^{n} f_{2j-1}......(3) T_{2n} (f, \\frac{h}{2}) = \\frac{T_{n}(f,h)}{2} + \\frac{h}{2} \\sum_{nj=1}^{n} f_{2j-1}......(3) pada (1) berlaku fk = f(x0+kh), sedangkan pada (2) berlaku fk = f(x0+kh/2), sehingga f2k pada (2) sama dengan fk pada (1). Rumus (3) disebut rumus trapesium rekursif. Rumus ini memungkinkan penggunaan aturan trapesium majemuk secara efisien, tanpa harus menghitung ulang nilai-nilai fungsi di beberapa absis yang sudah dihitung sebelumnya. Untuk h = (b-a), dan n = 1, 2, 4, 8, 16 . . . . atau n = 2^{0}, 2^{1}, 2^{2}, 2^{3}, 2^{4}, ..... 2^{k}.... n = 2^{0}, 2^{1}, 2^{2}, 2^{3}, 2^{4}, ..... 2^{k}.... Kita akan mendapatkan barisan aturan trapesium T_{0}, T_{1}, T_{2}, T_{3}.....T_{k},..... dengan, T_{0}, T_{1}, T_{2}, T_{3}.....T_{k},..... dengan, T_{0} = T_{1} (f, h) = \\frac{h}{2} (f(a)+f(b)) T_{0} = T_{1} (f, h) = \\frac{h}{2} (f(a)+f(b)) T_{k} = T_{2k} (f, \\frac{h}{2}), k = 1, 2, 3.... T_{k} = T_{2k} (f, \\frac{h}{2}), k = 1, 2, 3.... yang memenuhi hubungan T_{k+1} = \\frac{T_{k}}{2} + \\frac{h}{2^{k+1}} \\sum_{j=1}^{2^{k}} f_{2j-1} T_{k+1} = \\frac{T_{k}}{2} + \\frac{h}{2^{k+1}} \\sum_{j=1}^{2^{k}} f_{2j-1} dengan f1 = f(a+i(\\frac{h}{2^{k+1}})..... (4) f1 = f(a+i(\\frac{h}{2^{k+1}})..... (4) Berikut merupakan implementasi program metode trapesium rekursif. def fungsi ( x ): y = 1 / ( 1 + x ) return y print ( \"fungsi yang digunakan adalah\" ) print ( \"\" ) print ( \" \\t\\t \" , \"f(x) = 1/(1+x)\" ) print ( \"\" ) a = float ( input ( \"masukkan batas bawah integral : \" )) b = float ( input ( \"masukkan batas atas integral : \" )) c = int ( input ( \"masukkan n : \" )) eror = [] print ( \"\" ) print ( \"----------------Hasil Integrasi-----------------\" ) print ( \"iterasi\" , \" \\t \" , \"n\" , \" \\t\\t \" , \"Trapezoid\" ) for iterasi in range ( 0 , c ): n = 2 ** iterasi h = ( b - a ) / n xi = a y = 0 for i in range ( 1 , n ): xi = xi + h y += fungsi ( xi ) trap = (( h ) * ( fungsi ( a ) + ( 2 * y ) + fungsi ( b ))) / 2 eror . append ( trap ) print ( iterasi + 1 , \" \\t\\t \" , n , \" \\t\\t \" , trap ) print ( eror [ iterasi - 1 ]) print ( eror [ iterasi ]) hasil = ( eror [ iterasi - 1 ] - eror [ iterasi ]) print ( hasil ) print ( \"estimasi error : \" + str ( hasil )) Output: fungsi yang digunakan adalah f ( x ) = 1 / ( 1 + x ) masukkan batas bawah integral : 2 masukkan batas atas integral : 5 masukkan n : 3 ---------------- Hasil Integrasi ----------------- iterasi n Trapezoid 1 1 0.75 2 2 0.7083333333333333 3 4 0.6970238095238095 0.7083333333333333 0.6970238095238095 0.01130952380952377 estimasi error : 0.01130952380952377 Dari hasil output diatas dapat disimpulkan untuk fungsi f(x) = 1/(1+x) dengan batas bawah integral adalah 2 dan batas atasnya 5, dengan n = 3, proses iterasi menghasilkan estimasi error 0.01130952380952377.","title":"Aturan Trapesium Rekursif"},{"location":"release-notes/","text":"METODE EULER \u00b6 Metode Euler adalah salah satu dari metode satu langkah yang paling sederhana. Tetapi metode ini dianggap paling kurang teliti dibanding dengan beberapa metode lainnya. Metode Euler merupakan metode yang diturunkan dari deret taylor. Penyelesaian persamaan differensial biasa dengan metode Euler adalah proses mencari nilai fungsi y(x) pada titik x tertentu dari persamaan differensial biasa f(x,y) yang diketahui dengan menggunakan persamaan umum. Metode Deret Taylor Orde Satu (Euler Method) \u00b6 y \\left ( x_{0}+h \\right ) = y\\left ( x_{0} \\right ) + h \\frac{dy}{dx}| _{x=x_{0}, y = y_{0}} + O\\left ( h^2 \\right ) y \\left ( x_{0}+h \\right ) = y\\left ( x_{0} \\right ) + h \\frac{dy}{dx}| _{x=x_{0}, y = y_{0}} + O\\left ( h^2 \\right ) Notasi : x_{n} = x_{0}+nh, y_{n} = y\\left ( x_{n} \\right ), \\frac{dy}{dx}|_{x= x_{0}, y = y_{0}} = f\\left ( x_{i},y_{i} \\right ) x_{n} = x_{0}+nh, y_{n} = y\\left ( x_{n} \\right ), \\frac{dy}{dx}|_{x= x_{0}, y = y_{0}} = f\\left ( x_{i},y_{i} \\right ) Metode Euler : y_{0} = y\\left ( x_{0} \\right ) y_{0} = y\\left ( x_{0} \\right ) y_{i+1}=y_i+f\\left(x_i,y_i\\right)h \\tag{1} y_{i+1}=y_i+f\\left(x_i,y_i\\right)h \\tag{1} untuk i = 1, 2, 3, . . . . . . Algoritma Metode Euler \u00b6 Tentukan titik awal integrasi x0 dan y0. Tentukan jumlah iterasi n dan step size h yang digunakan. Lakukan integrasi menggunakan Persamaan (1). Tugas Pemrograman \u00b6 Buatlah program untuk menyelesaikan persamaan differensial biasa berikut dengan menggunakan metode Euler \\frac{dx}{dy} = 1 +x^{2}, y\\left ( 1 \\right ) = -4 \\frac{dx}{dy} = 1 +x^{2}, y\\left ( 1 \\right ) = -4 untuk menentukan y(1.01), y(1.02) dan y(1.03). Code Program \u00b6 print ( \"f(x,y)=1+x^2\" ) print ( \"yi+1 = y1 + hf(xi+yi)\" ) h = 0.01 xi = - 4 x0 = 1 hasil = xi y = 0 for i in range ( 4 ): print ( \"\" ) print ( \"keterangan = h:\" , h , \", y:\" , y , \", x:\" , xi ) hasil = xi + h * ( 1 + ( x0 + y ) ** 2 ) print ( \"Langkah - \" , i + 1 , \" = \" , xi , \"+\" , h , \"* ( 1 + (\" , x0 , \"+\" , y , \")^2 )\" ) y += h xi = hasil print ( \"hasil dari y\" + str ( i ) + \"= \" + str ( hasil )) Output: f ( x , y ) = 1 + x ^ 2 yi + 1 = y1 + hf ( xi + yi ) keterangan = h : 0.01 , y : 0 , x : - 4 Langkah - 1 = - 4 + 0.01 * ( 1 + ( 1 + 0 ) ^ 2 ) hasil dari y0 = - 3.98 keterangan = h : 0.01 , y : 0.01 , x : - 3.98 Langkah - 2 = - 3.98 + 0.01 * ( 1 + ( 1 + 0.01 ) ^ 2 ) hasil dari y1 = - 3.959799 keterangan = h : 0.01 , y : 0.02 , x : - 3.959799 Langkah - 3 = - 3.959799 + 0.01 * ( 1 + ( 1 + 0.02 ) ^ 2 ) hasil dari y2 = - 3.9393949999999998 keterangan = h : 0.01 , y : 0.03 , x : - 3.9393949999999998 Langkah - 4 = - 3.9393949999999998 + 0.01 * ( 1 + ( 1 + 0.03 ) ^ 2 ) hasil dari y3 = - 3.918786 Penjelasan : pertama, diinisialisasi beberapa variabel h = 0.01 xi = -4 dimana di soal tertulis y = -4 x0 = 1 dimana x0 adalah x awal hasil = x1 dimana hasil pertama kali yaitu x1 dan x1 = -4 , jadi hasil pertama kali -4 y = 0 adalah inisialisasi awal yang nantinya akan ditambah dengan x0 (x awal) dan berkelanjutan di ulang sebanyak 4 dengan langkah yang sudah dijelaskan.","title":"METODE EULER"},{"location":"release-notes/#metode-euler","text":"Metode Euler adalah salah satu dari metode satu langkah yang paling sederhana. Tetapi metode ini dianggap paling kurang teliti dibanding dengan beberapa metode lainnya. Metode Euler merupakan metode yang diturunkan dari deret taylor. Penyelesaian persamaan differensial biasa dengan metode Euler adalah proses mencari nilai fungsi y(x) pada titik x tertentu dari persamaan differensial biasa f(x,y) yang diketahui dengan menggunakan persamaan umum.","title":"METODE EULER"},{"location":"release-notes/#metode-deret-taylor-orde-satu-euler-method","text":"y \\left ( x_{0}+h \\right ) = y\\left ( x_{0} \\right ) + h \\frac{dy}{dx}| _{x=x_{0}, y = y_{0}} + O\\left ( h^2 \\right ) y \\left ( x_{0}+h \\right ) = y\\left ( x_{0} \\right ) + h \\frac{dy}{dx}| _{x=x_{0}, y = y_{0}} + O\\left ( h^2 \\right ) Notasi : x_{n} = x_{0}+nh, y_{n} = y\\left ( x_{n} \\right ), \\frac{dy}{dx}|_{x= x_{0}, y = y_{0}} = f\\left ( x_{i},y_{i} \\right ) x_{n} = x_{0}+nh, y_{n} = y\\left ( x_{n} \\right ), \\frac{dy}{dx}|_{x= x_{0}, y = y_{0}} = f\\left ( x_{i},y_{i} \\right ) Metode Euler : y_{0} = y\\left ( x_{0} \\right ) y_{0} = y\\left ( x_{0} \\right ) y_{i+1}=y_i+f\\left(x_i,y_i\\right)h \\tag{1} y_{i+1}=y_i+f\\left(x_i,y_i\\right)h \\tag{1} untuk i = 1, 2, 3, . . . . . .","title":"Metode Deret Taylor Orde Satu (Euler Method)"},{"location":"release-notes/#algoritma-metode-euler","text":"Tentukan titik awal integrasi x0 dan y0. Tentukan jumlah iterasi n dan step size h yang digunakan. Lakukan integrasi menggunakan Persamaan (1).","title":"Algoritma Metode Euler"},{"location":"release-notes/#tugas-pemrograman","text":"Buatlah program untuk menyelesaikan persamaan differensial biasa berikut dengan menggunakan metode Euler \\frac{dx}{dy} = 1 +x^{2}, y\\left ( 1 \\right ) = -4 \\frac{dx}{dy} = 1 +x^{2}, y\\left ( 1 \\right ) = -4 untuk menentukan y(1.01), y(1.02) dan y(1.03).","title":"Tugas Pemrograman"},{"location":"release-notes/#code-program","text":"print ( \"f(x,y)=1+x^2\" ) print ( \"yi+1 = y1 + hf(xi+yi)\" ) h = 0.01 xi = - 4 x0 = 1 hasil = xi y = 0 for i in range ( 4 ): print ( \"\" ) print ( \"keterangan = h:\" , h , \", y:\" , y , \", x:\" , xi ) hasil = xi + h * ( 1 + ( x0 + y ) ** 2 ) print ( \"Langkah - \" , i + 1 , \" = \" , xi , \"+\" , h , \"* ( 1 + (\" , x0 , \"+\" , y , \")^2 )\" ) y += h xi = hasil print ( \"hasil dari y\" + str ( i ) + \"= \" + str ( hasil )) Output: f ( x , y ) = 1 + x ^ 2 yi + 1 = y1 + hf ( xi + yi ) keterangan = h : 0.01 , y : 0 , x : - 4 Langkah - 1 = - 4 + 0.01 * ( 1 + ( 1 + 0 ) ^ 2 ) hasil dari y0 = - 3.98 keterangan = h : 0.01 , y : 0.01 , x : - 3.98 Langkah - 2 = - 3.98 + 0.01 * ( 1 + ( 1 + 0.01 ) ^ 2 ) hasil dari y1 = - 3.959799 keterangan = h : 0.01 , y : 0.02 , x : - 3.959799 Langkah - 3 = - 3.959799 + 0.01 * ( 1 + ( 1 + 0.02 ) ^ 2 ) hasil dari y2 = - 3.9393949999999998 keterangan = h : 0.01 , y : 0.03 , x : - 3.9393949999999998 Langkah - 4 = - 3.9393949999999998 + 0.01 * ( 1 + ( 1 + 0.03 ) ^ 2 ) hasil dari y3 = - 3.918786 Penjelasan : pertama, diinisialisasi beberapa variabel h = 0.01 xi = -4 dimana di soal tertulis y = -4 x0 = 1 dimana x0 adalah x awal hasil = x1 dimana hasil pertama kali yaitu x1 dan x1 = -4 , jadi hasil pertama kali -4 y = 0 adalah inisialisasi awal yang nantinya akan ditambah dengan x0 (x awal) dan berkelanjutan di ulang sebanyak 4 dengan langkah yang sudah dijelaskan.","title":"Code Program"},{"location":"specimen/","text":"METODE NEWTON RAPHSON \u00b6 PENGERTIAN METODE NEWTON RAPHSON \u00b6 \u200b Metode Newton atau disebut juga dengan Metode Newton-Raphson merupakan suatu metode yang sering dipergunakan untuk menyelesaikan persamaan non linier. Metode Newton-Raphson adalah metode pencarian akar suatu fungsi f(x) dengan pendekatan satu titik sebagai titik awal, dimana fungsi f(x) mempunyai turunan. Semakin dekat titik awal yang dipilih dengan akar sebenarnya, maka semakin cepat konvergen ke akarnya. Implementasi metode ini biasanya mendeteksi dan mengatasi kegagalan konvergensi. \u200b Diketahui fungsi \u0192(x) dan turunannya \u0192'(x), kita memulai dengan tebakan pertama xn, Hampiran yang lebih baik xn+1 adalah: \u200b x_{n+1} = x_{n} - \\frac {f(x_{n})}{f^{n}(x_{n})} x_{n+1} = x_{n} - \\frac {f(x_{n})}{f^{n}(x_{n})} xn = titik ke-n, untuk n = 0, 1, 2, ..... fn = f turunan ke-n Permasalahan pada pemakaian Metode Newton-Raphson: Metode ini tidak dapat digunakan ketika titik pendekatannya berada pada titik ekstrim atau titik puncak, karena pada titik ini nilai F'(x) = 0 sehingga nilai penyebut dari (F(x))/(F^' (x)) sama dengan nol. Metode ini menjadi sulit atau lama mendapatkan penyelesaian ketika titik pendekatannya berada diantara dua titik puncak. Algoritma Metode Newton-Raphson: Definisikan fungsi \u0192(x) dan turunannya \u0192'(x). Tentukan toleransi error (e) dan iterasi maksimum (n). Tentukan nilai pendekatan awal (x0). Hitung \u0192(x0) dan \u0192'(x0). Untuk iterasi I = 1 s/d n atau |f(xi)|\u2265 e $$ x_{n+1}=x_{n} - \\frac {f(x_{n})}{f^{1}(x_{n})} $$ Hitung \u0192(xi) dan \u0192'(xi), akar persamaan adalah nilai xi yang terakhir diperoleh. PROGRAM NEWTON RAPHSON PADA FUNGSI PERSAMAAN NON-LINIER \u00b6 Jika diketahui f(x) = e^x - 4x, berikut merupakan implementasi pemrogramannya. import math e = 2.71828 def fungsi ( x ): x = float (( e ** x ) - ( 4 * x )) return x def fungsiturunan ( x ): x = float (( e ** x ) - ( 4 )) return x x = float ( input ( 'Masukkan nilai awal = ' )) error = float ( input ( 'Masukkan nilai error = ' )) perulangan = int ( input ( 'Masukkan maksimal pengulangan = ' )) iterasi = 0 selisih = error + 1 while iterasi <= perulangan and selisih > error : iterasi += 1 f_2 = x - ( fungsi ( x ) / fungsiturunan ( x )) selisih = math . fabs ( f_2 - x ) x = f_2 print ( \"Iterasi ke = \" , iterasi , \", x = \" , f_2 , \", f(\" , f_2 , \") = \" , fungsi ( f_2 ), \", selisih = \" , error ) if iterasi <= perulangan : print ( \"Perulangan Mencapai Batas Maksimal dengan hasil = \" , f_2 ) else : print ( \"Toleransi tidak terpenuhi\" ) Output: Masukkan nilai awal = 0 Masukkan nilai error = 0.0001 Masukkan maksimal pengulangan = 20 Iterasi ke = 1 , x = 0.3333333333333333 , f ( 0.3333333333333333 ) = 0.06227877883196098 , selisih = 0.0001 Perulangan Mencapai Batas Maksimal dengan hasil = 0.3333333333333333 Iterasi ke = 2 , x = 0.35724635301940616 , f ( 0.35724635301940616 ) = 0.0004022049593612742 , selisih = 0.0001 Perulangan Mencapai Batas Maksimal dengan hasil = 0.35724635301940616 Iterasi ke = 3 , x = 0.35740281572145605 , f ( 0.35740281572145605 ) = 1.734656973617632e-08 , selisih = 0.0001 Perulangan Mencapai Batas Maksimal dengan hasil = 0.35740281572145605 Iterasi ke = 4 , x = 0.3574028224700733 , f ( 0.3574028224700733 ) = - 6.439293542825908e-15 , selisih = 0.0001 Perulangan Mencapai Batas Maksimal dengan hasil = 0.3574028224700733 Penjelasan : Importh Library math karena kita menggunakan contoh fungsi f(x) = e^x - 4X maka kita membuat sebuah fungsi yang sesuai , dan juga fungsi turunannya yaitu f'(x) = e^x - 4 Membuat sebuah inputan untuk X , Error / Epsilon , serta Maksimal perulangan untuk stopping condition lalu deklarasikan iterasi = 0 untuk perulangan yang ke 0 nantinya dan akan ditambah setiap kali perulangan deklarasikan selisih untuk xb - x0 untuk perbandingan lakukan perulangan dengan kondisi iterasi kurang dari sama dengan inputan maksimal iterasi dan selisih lebih dari error / epsilon hitung x_b dengan rumus yang sudah kita dapatkan sebelumnya lalu lakukan perbandingan jika mencapai nilai True maka toleransi tidak terpenuhi namun perulangan sudah mencapai batas jika pengecekan selisih > error bernilai bernilai True maka toleransi akan terpenuhi dengan nilai error serta fungsi x pada iterasi ke n","title":"METODE NEWTON RAPHSON"},{"location":"specimen/#metode-newton-raphson","text":"","title":"METODE NEWTON RAPHSON"},{"location":"specimen/#pengertian-metode-newton-raphson","text":"\u200b Metode Newton atau disebut juga dengan Metode Newton-Raphson merupakan suatu metode yang sering dipergunakan untuk menyelesaikan persamaan non linier. Metode Newton-Raphson adalah metode pencarian akar suatu fungsi f(x) dengan pendekatan satu titik sebagai titik awal, dimana fungsi f(x) mempunyai turunan. Semakin dekat titik awal yang dipilih dengan akar sebenarnya, maka semakin cepat konvergen ke akarnya. Implementasi metode ini biasanya mendeteksi dan mengatasi kegagalan konvergensi. \u200b Diketahui fungsi \u0192(x) dan turunannya \u0192'(x), kita memulai dengan tebakan pertama xn, Hampiran yang lebih baik xn+1 adalah: \u200b x_{n+1} = x_{n} - \\frac {f(x_{n})}{f^{n}(x_{n})} x_{n+1} = x_{n} - \\frac {f(x_{n})}{f^{n}(x_{n})} xn = titik ke-n, untuk n = 0, 1, 2, ..... fn = f turunan ke-n Permasalahan pada pemakaian Metode Newton-Raphson: Metode ini tidak dapat digunakan ketika titik pendekatannya berada pada titik ekstrim atau titik puncak, karena pada titik ini nilai F'(x) = 0 sehingga nilai penyebut dari (F(x))/(F^' (x)) sama dengan nol. Metode ini menjadi sulit atau lama mendapatkan penyelesaian ketika titik pendekatannya berada diantara dua titik puncak. Algoritma Metode Newton-Raphson: Definisikan fungsi \u0192(x) dan turunannya \u0192'(x). Tentukan toleransi error (e) dan iterasi maksimum (n). Tentukan nilai pendekatan awal (x0). Hitung \u0192(x0) dan \u0192'(x0). Untuk iterasi I = 1 s/d n atau |f(xi)|\u2265 e $$ x_{n+1}=x_{n} - \\frac {f(x_{n})}{f^{1}(x_{n})} $$ Hitung \u0192(xi) dan \u0192'(xi), akar persamaan adalah nilai xi yang terakhir diperoleh.","title":"PENGERTIAN METODE NEWTON RAPHSON"},{"location":"specimen/#program-newton-raphson-pada-fungsi-persamaan-non-linier","text":"Jika diketahui f(x) = e^x - 4x, berikut merupakan implementasi pemrogramannya. import math e = 2.71828 def fungsi ( x ): x = float (( e ** x ) - ( 4 * x )) return x def fungsiturunan ( x ): x = float (( e ** x ) - ( 4 )) return x x = float ( input ( 'Masukkan nilai awal = ' )) error = float ( input ( 'Masukkan nilai error = ' )) perulangan = int ( input ( 'Masukkan maksimal pengulangan = ' )) iterasi = 0 selisih = error + 1 while iterasi <= perulangan and selisih > error : iterasi += 1 f_2 = x - ( fungsi ( x ) / fungsiturunan ( x )) selisih = math . fabs ( f_2 - x ) x = f_2 print ( \"Iterasi ke = \" , iterasi , \", x = \" , f_2 , \", f(\" , f_2 , \") = \" , fungsi ( f_2 ), \", selisih = \" , error ) if iterasi <= perulangan : print ( \"Perulangan Mencapai Batas Maksimal dengan hasil = \" , f_2 ) else : print ( \"Toleransi tidak terpenuhi\" ) Output: Masukkan nilai awal = 0 Masukkan nilai error = 0.0001 Masukkan maksimal pengulangan = 20 Iterasi ke = 1 , x = 0.3333333333333333 , f ( 0.3333333333333333 ) = 0.06227877883196098 , selisih = 0.0001 Perulangan Mencapai Batas Maksimal dengan hasil = 0.3333333333333333 Iterasi ke = 2 , x = 0.35724635301940616 , f ( 0.35724635301940616 ) = 0.0004022049593612742 , selisih = 0.0001 Perulangan Mencapai Batas Maksimal dengan hasil = 0.35724635301940616 Iterasi ke = 3 , x = 0.35740281572145605 , f ( 0.35740281572145605 ) = 1.734656973617632e-08 , selisih = 0.0001 Perulangan Mencapai Batas Maksimal dengan hasil = 0.35740281572145605 Iterasi ke = 4 , x = 0.3574028224700733 , f ( 0.3574028224700733 ) = - 6.439293542825908e-15 , selisih = 0.0001 Perulangan Mencapai Batas Maksimal dengan hasil = 0.3574028224700733 Penjelasan : Importh Library math karena kita menggunakan contoh fungsi f(x) = e^x - 4X maka kita membuat sebuah fungsi yang sesuai , dan juga fungsi turunannya yaitu f'(x) = e^x - 4 Membuat sebuah inputan untuk X , Error / Epsilon , serta Maksimal perulangan untuk stopping condition lalu deklarasikan iterasi = 0 untuk perulangan yang ke 0 nantinya dan akan ditambah setiap kali perulangan deklarasikan selisih untuk xb - x0 untuk perbandingan lakukan perulangan dengan kondisi iterasi kurang dari sama dengan inputan maksimal iterasi dan selisih lebih dari error / epsilon hitung x_b dengan rumus yang sudah kita dapatkan sebelumnya lalu lakukan perbandingan jika mencapai nilai True maka toleransi tidak terpenuhi namun perulangan sudah mencapai batas jika pengecekan selisih > error bernilai bernilai True maka toleransi akan terpenuhi dengan nilai error serta fungsi x pada iterasi ke n","title":"PROGRAM NEWTON RAPHSON PADA FUNGSI PERSAMAAN NON-LINIER"},{"location":"extensions/admonition/","text":"Admonition \u00b6 Admonition is an extension included in the standard Markdown library that makes it possible to add block-styled side content to your documentation, for example summaries, notes, hints or warnings. Installation \u00b6 Add the following lines to your mkdocs.yml : markdown_extensions : - admonition Usage \u00b6 Admonition blocks follow a simple syntax: every block is started with !!! , followed by a single keyword which is used as the type qualifier of the block. The content of the block then follows on the next line, indented by four spaces. Example: !!! note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Changing the title \u00b6 By default, the block title will equal the type qualifier in titlecase. However, it can easily be changed by adding a quoted string after the type qualifier. Example: !!! note \"Phasellus posuere in sem ut cursus\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Phasellus posuere in sem ut cursus Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Removing the title \u00b6 Similar to setting a custom title , the icon and title can be omitted by providing an empty string after the type qualifier: Example: !!! note \"\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Embedded code blocks \u00b6 Blocks can contain all kinds of text content, including headlines, lists, paragraphs and other blocks \u2013 except code blocks, because the parser from the standard Markdown library does not account for those. However, the PyMdown Extensions package adds an extension called SuperFences , which makes it possible to nest code blocks within other blocks, respectively Admonition blocks. Example: Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. SELECT Employees . EmployeeID , Employees . Name , Employees . Salary , Manager . Name AS Manager FROM Employees LEFT JOIN Employees AS Manager ON Employees . ManagerID = Manager . EmployeeID WHERE Employees . EmployeeID = '087652' ; Nunc eu odio eleifend, blandit leo a, volutpat sapien. Phasellus posuere in sem ut cursus. Nullam sit amet tincidunt ipsum, sit amet elementum turpis. Etiam ipsum quam, mattis in purus vitae, lacinia fermentum enim. Collapsible blocks \u00b6 The Details extension which is also part of the PyMdown Extensions package adds support for rendering collapsible Admonition blocks. This is useful for FAQs or content that is of secondary nature. Example: ??? note \"Phasellus posuere in sem ut cursus\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Phasellus posuere in sem ut cursus Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. By adding a + sign directly after the start marker, blocks can be rendered open by default. Types \u00b6 Admonition supports user-defined type qualifiers which may influence the style of the inserted block. Following is a list of type qualifiers provided by the Material theme, whereas the default type, and thus fallback for unknown type qualifiers, is note . Note \u00b6 Example: !!! note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: note seealso Abstract \u00b6 Example: !!! abstract Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Abstract Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: abstract summary tldr Info \u00b6 Example: !!! info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: info todo Tip \u00b6 Example: !!! tip Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Tip Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: tip hint important Success \u00b6 Example: !!! success Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Success Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: success check done Question \u00b6 Example: !!! question Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Question Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: question help faq Warning \u00b6 Example: !!! warning Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Warning Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: warning caution attention Failure \u00b6 Example: !!! failure Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Failure Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: failure fail missing Danger \u00b6 Example: !!! danger Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Danger Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: danger error Bug \u00b6 Example: !!! bug Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Bug Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: bug Example \u00b6 Example: !!! example Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Example Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: example snippet Quote \u00b6 Example: !!! quote Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Quote Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: quote cite","title":"Admonition"},{"location":"extensions/admonition/#admonition","text":"Admonition is an extension included in the standard Markdown library that makes it possible to add block-styled side content to your documentation, for example summaries, notes, hints or warnings.","title":"Admonition"},{"location":"extensions/admonition/#installation","text":"Add the following lines to your mkdocs.yml : markdown_extensions : - admonition","title":"Installation"},{"location":"extensions/admonition/#usage","text":"Admonition blocks follow a simple syntax: every block is started with !!! , followed by a single keyword which is used as the type qualifier of the block. The content of the block then follows on the next line, indented by four spaces. Example: !!! note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Usage"},{"location":"extensions/admonition/#changing-the-title","text":"By default, the block title will equal the type qualifier in titlecase. However, it can easily be changed by adding a quoted string after the type qualifier. Example: !!! note \"Phasellus posuere in sem ut cursus\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Phasellus posuere in sem ut cursus Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Changing the title"},{"location":"extensions/admonition/#removing-the-title","text":"Similar to setting a custom title , the icon and title can be omitted by providing an empty string after the type qualifier: Example: !!! note \"\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Removing the title"},{"location":"extensions/admonition/#embedded-code-blocks","text":"Blocks can contain all kinds of text content, including headlines, lists, paragraphs and other blocks \u2013 except code blocks, because the parser from the standard Markdown library does not account for those. However, the PyMdown Extensions package adds an extension called SuperFences , which makes it possible to nest code blocks within other blocks, respectively Admonition blocks. Example: Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. SELECT Employees . EmployeeID , Employees . Name , Employees . Salary , Manager . Name AS Manager FROM Employees LEFT JOIN Employees AS Manager ON Employees . ManagerID = Manager . EmployeeID WHERE Employees . EmployeeID = '087652' ; Nunc eu odio eleifend, blandit leo a, volutpat sapien. Phasellus posuere in sem ut cursus. Nullam sit amet tincidunt ipsum, sit amet elementum turpis. Etiam ipsum quam, mattis in purus vitae, lacinia fermentum enim.","title":"Embedded code blocks"},{"location":"extensions/admonition/#collapsible-blocks","text":"The Details extension which is also part of the PyMdown Extensions package adds support for rendering collapsible Admonition blocks. This is useful for FAQs or content that is of secondary nature. Example: ??? note \"Phasellus posuere in sem ut cursus\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Phasellus posuere in sem ut cursus Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. By adding a + sign directly after the start marker, blocks can be rendered open by default.","title":"Collapsible blocks"},{"location":"extensions/admonition/#types","text":"Admonition supports user-defined type qualifiers which may influence the style of the inserted block. Following is a list of type qualifiers provided by the Material theme, whereas the default type, and thus fallback for unknown type qualifiers, is note .","title":"Types"},{"location":"extensions/admonition/#note","text":"Example: !!! note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: note seealso","title":"Note"},{"location":"extensions/admonition/#abstract","text":"Example: !!! abstract Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Abstract Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: abstract summary tldr","title":"Abstract"},{"location":"extensions/admonition/#info","text":"Example: !!! info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: info todo","title":"Info"},{"location":"extensions/admonition/#tip","text":"Example: !!! tip Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Tip Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: tip hint important","title":"Tip"},{"location":"extensions/admonition/#success","text":"Example: !!! success Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Success Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: success check done","title":"Success"},{"location":"extensions/admonition/#question","text":"Example: !!! question Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Question Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: question help faq","title":"Question"},{"location":"extensions/admonition/#warning","text":"Example: !!! warning Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Warning Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: warning caution attention","title":"Warning"},{"location":"extensions/admonition/#failure","text":"Example: !!! failure Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Failure Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: failure fail missing","title":"Failure"},{"location":"extensions/admonition/#danger","text":"Example: !!! danger Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Danger Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: danger error","title":"Danger"},{"location":"extensions/admonition/#bug","text":"Example: !!! bug Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Bug Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: bug","title":"Bug"},{"location":"extensions/admonition/#example","text":"Example: !!! example Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Example Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: example snippet","title":"Example"},{"location":"extensions/admonition/#quote","text":"Example: !!! quote Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Quote Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: quote cite","title":"Quote"},{"location":"extensions/codehilite/","text":"CodeHilite \u00b6 CodeHilite is an extension that adds syntax highlighting to code blocks and is included in the standard Markdown library. The highlighting process is executed during compilation of the Markdown file. Syntax highlighting not working? Please ensure that Pygments is installed. See the next section for further directions on how to set up Pygments or use the official Docker image with all dependencies pre-installed. Installation \u00b6 CodeHilite parses code blocks and wraps them in pre tags. If Pygments is installed, which is a generic syntax highlighter with support for over 300 languages , CodeHilite will also highlight the code block. Pygments can be installed with the following command: pip install pygments To enable CodeHilite, add the following lines to your mkdocs.yml : markdown_extensions : - codehilite Usage \u00b6 Specifying the language \u00b6 The CodeHilite extension uses the same syntax as regular Markdown code blocks, but needs to know the language of the code block. This can be done in three different ways. via Markdown syntax recommended \u00b6 In Markdown, code blocks can be opened and closed by writing three backticks on separate lines. To add code highlighting to those blocks, the easiest way is to specify the language directly after the opening block. Example: ``` python import tensorflow as tf ``` Result: import tensorflow as tf via Shebang \u00b6 Alternatively, if the first line of a code block contains a shebang, the language is derived from the path referenced in the shebang. This will only work for code blocks that are indented using four spaces, not for those encapsulated in three backticks. Example: #!/usr/bin/python import tensorflow as tf Result: #!/usr/bin/python import tensorflow as tf via three colons \u00b6 If the first line starts with three colons followed by a language identifier, the first line is stripped. This will only work for code blocks that are indented using four spaces, not for those encapsulated in three backticks. Example: :::python import tensorflow as tf Result: import tensorflow as tf Adding line numbers \u00b6 Line numbers can be added by enabling the linenums flag in your mkdocs.yml : markdown_extensions : - codehilite : linenums : true Example: ``` python \"\"\" Bubble sort \"\"\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` Result: 1 2 3 4 5 6 \"\"\" Bubble sort \"\"\" def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Grouping code blocks \u00b6 The SuperFences extension which is part of the PyMdown Extensions package adds support for grouping code blocks with tabs. This is especially useful for documenting projects with multiple language bindings. Example: ``` bash tab=\"Bash\" #!/bin/bash echo \"Hello world!\" ``` ``` c tab=\"C\" #include <stdio.h> int main(void) { printf(\"Hello world!\\n\"); } ``` ``` c++ tab=\"C++\" #include <iostream> int main() { std::cout << \"Hello world!\" << std::endl; return 0; } ``` ``` c# tab=\"C#\" using System; class Program { static void Main(string[] args) { Console.WriteLine(\"Hello world!\"); } } ``` Result: Bash #!/bin/bash echo \"Hello world!\" C #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); } C++ #include <iostream> int main () { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; } C# using System ; class Program { static void Main ( string [] args ) { Console . WriteLine ( \"Hello world!\" ); } } Highlighting specific lines \u00b6 Specific lines can be highlighted by passing the line numbers to the hl_lines argument placed right after the language identifier. Line counts start at 1. Example: ``` python hl_lines=\"3 4\" \"\"\" Bubble sort \"\"\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` Result: 1 2 3 4 5 6 \"\"\" Bubble sort \"\"\" def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Supported languages excerpt \u00b6 CodeHilite uses Pygments , a generic syntax highlighter with support for over 300 languages , so the following list of examples is just an excerpt. Bash \u00b6 #!/bin/bash for OPT in \" $@ \" do case \" $OPT \" in '-f' ) canonicalize = 1 ;; '-n' ) switchlf = \"-n\" ;; esac done # readlink -f function __readlink_f { target = \" $1 \" while test -n \" $target \" ; do filepath = \" $target \" cd ` dirname \" $filepath \" ` target = ` readlink \" $filepath \" ` done /bin/echo $switchlf ` pwd -P ` / ` basename \" $filepath \" ` } if [ ! \" $canonicalize \" ] ; then readlink $switchlf \" $@ \" else for file in \" $@ \" do case \" $file \" in -* ) ;; * ) __readlink_f \" $file \" ;; esac done fi exit $? C \u00b6 extern size_t pb_varint_scan ( const uint8_t data [], size_t left ) { assert ( data && left ); left = left > 10 ? 10 : left ; #ifdef __SSE2__ /* Mapping: remaining bytes ==> bitmask */ static const int mask_map [] = { 0x0000 , 0x0001 , 0x0003 , 0x0007 , 0x000F , 0x001F , 0x003F , 0x007F , 0x00FF , 0x01FF , 0x03FF }; /* Load buffer into 128-bit integer and create high-bit mask */ __m128i temp = _mm_loadu_si128 (( const __m128i * ) data ); __m128i high = _mm_set1_epi8 ( 0x80 ); /* Intersect and extract mask with high-bits set */ int mask = _mm_movemask_epi8 ( _mm_and_si128 ( temp , high )); mask = ( mask & mask_map [ left ]) ^ mask_map [ left ]; /* Count trailing zeroes */ return mask ? __builtin_ctz ( mask ) + 1 : 0 ; #else /* Linear scan */ size_t size = 0 ; while ( data [ size ++ ] & 0x80 ) if ( !-- left ) return 0 ; return size ; #endif /* __SSE2__ */ } C++ \u00b6 Extension :: Extension ( const Descriptor * descriptor , const Descriptor * scope ) : descriptor_ ( descriptor ), scope_ ( scope ) { /* Extract full name for signature */ variables_ [ \"signature\" ] = descriptor_ -> full_name (); /* Prepare message symbol */ variables_ [ \"message\" ] = StringReplace ( variables_ [ \"signature\" ], \".\" , \"_\" , true ); LowerString ( & ( variables_ [ \"message\" ])); /* Suffix scope to identifiers, if given */ string suffix ( \"\" ); if ( scope_ ) { suffix = scope_ -> full_name (); /* Check if the base and extension types are in the same package */ if ( ! scope_ -> file () -> package (). compare ( descriptor_ -> file () -> package ())) suffix = StripPrefixString ( suffix , scope_ -> file () -> package () + \".\" ); /* Append to signature */ variables_ [ \"signature\" ] += \".[\" + suffix + \"]\" ; suffix = \"_\" + suffix ; } /* Prepare extension symbol */ variables_ [ \"extension\" ] = StringReplace ( suffix , \".\" , \"_\" , true ); LowerString ( & ( variables_ [ \"extension\" ])); } C# \u00b6 public static void Send ( Socket socket , byte [] buffer , int offset , int size , int timeout ) { int startTickCount = Environment . TickCount ; int sent = 0 ; do { if ( Environment . TickCount > startTickCount + timeout ) throw new Exception ( \"Timeout.\" ); try { sent += socket . Send ( buffer , offset + sent , size - sent , SocketFlags . None ); } catch ( SocketException ex ) { if ( ex . SocketErrorCode == SocketError . WouldBlock || ex . SocketErrorCode == SocketError . IOPending || ex . SocketErrorCode == SocketError . NoBufferSpaceAvailable ) { /* Socket buffer is probably full, wait and try again */ Thread . Sleep ( 30 ); } else { throw ex ; } } } while ( sent < size ); } Clojure \u00b6 ( clojure-version ) ( defn partition-when [ f ] ( fn [ rf ] ( let [ a ( java.util.ArrayList. ) fval ( volatile! false )] ( fn ([] ( rf )) ([ result ] ( let [ result ( if ( .isEmpty a ) result ( let [ v ( vec ( .toArray a ))] ;; Clear first ( .clear a ) ( unreduced ( rf result v ))))] ( rf result ))) ([ result input ] ( if-not ( and ( f input ) @ fval ) ( do ( vreset! fval true ) ( .add a input ) result ) ( let [ v ( vec ( .toArray a ))] ( .clear a ) ( let [ ret ( rf result v )] ( when-not ( reduced? ret ) ( .add a input )) ret )))))))) ( into [] ( partition-when # ( .startsWith % \">>\" )) [ \"1d\" \"33\" \">> 1\" \">> 2\" \"22\" \">> 3\" ]) Diff \u00b6 Index: grunt.js =================================================================== --- grunt.js (revision 31200) +++ grunt.js (working copy) @@ -12,6 +12,7 @@ module.exports = function (grunt) { + console.log('hello world'); // Project configuration. grunt.initConfig({ lint: { @@ -19,10 +20,6 @@ 'packages/services.web/{!(test)/**/,}*.js', 'packages/error/**/*.js' ], - scripts: [ - 'grunt.js', - 'db/**/*.js' - ], browser: [ 'packages/web/server.js', 'packages/web/server/**/*.js', Docker \u00b6 FROM ubuntu # Install vnc, xvfb in order to create a 'fake' display and firefox RUN apt-get update && apt-get install -y x11vnc xvfb firefox RUN mkdir ~/.vnc # Setup a password RUN x11vnc -storepasswd 1234 ~/.vnc/passwd # Autostart firefox (might not be the best way, but it does the trick) RUN bash -c 'echo \"firefox\" >> /.bashrc' EXPOSE 5900 CMD [ \"x11vnc\" , \"-forever\" , \"-usepw\" , \"-create\" ] Elixir \u00b6 require Logger def accept ( port ) do { :ok , socket } = :gen_tcp . listen ( port , [ :binary , packet : :line , active : false , reuseaddr : true ]) Logger . info \"Accepting connections on port #{ port } \" loop_acceptor ( socket ) end defp loop_acceptor ( socket ) do { :ok , client } = :gen_tcp . accept ( socket ) serve ( client ) loop_acceptor ( socket ) end defp serve ( socket ) do socket |> read_line () |> write_line ( socket ) serve ( socket ) end defp read_line ( socket ) do { :ok , data } = :gen_tcp . recv ( socket , 0 ) data end defp write_line ( line , socket ) do :gen_tcp . send ( socket , line ) end Erlang \u00b6 circular ( Defs ) -> [ { { Type , Base }, Fields } || { { Type , Base }, Fields } <- Defs , Type == msg , circular ( Base , Defs ) ]. circular ( Base , Defs ) -> Fields = proplists : get_value ({ msg , Base }, Defs ), circular ( Defs , Fields , [ Base ]). circular (_ Defs , [], _ Path ) -> false ; circular ( Defs , [ Field | Fields ], Path ) -> case Field #field.type of { msg , Type } -> case lists : member ( Type , Path ) of false -> Children = proplists : get_value ({ msg , Type }, Defs ), case circular ( Defs , Children , [ Type | Path ]) of false -> circular ( Defs , Fields , Path ); true -> true end ; true -> Type == lists : last ( Path ) andalso ( length ( Path ) == 1 orelse not is_tree ( Path )) end ; _ -> circular ( Defs , Fields , Path ) end . F# \u00b6 /// Asynchronously download retangles from the server /// and decode the JSON format to F# Rectangle record let [< Js >] getRectangles () : Async < Rectangle [] > = async { let req = XMLHttpRequest () req . Open ( \"POST\" , \"/get\" , true ) let! resp = req . AsyncSend () return JSON . parse ( resp ) } /// Repeatedly update rectangles after 0.5 sec let [< Js >] updateLoop () = async { while true do do ! Async . Sleep ( 500 ) let! rects = getRectangles () cleanRectangles () rects |> Array . iter createRectangle } Go \u00b6 package main import \"fmt\" func counter ( id int , channel chan int , closer bool ) { for i := 0 ; i < 10000000 ; i ++ { fmt . Println ( \"process\" , id , \" send\" , i ) channel <- 1 } if closer { close ( channel ) } } func main () { channel := make ( chan int ) go counter ( 1 , channel , false ) go counter ( 2 , channel , true ) x := 0 // receiving data from channel for i := range channel { fmt . Println ( \"receiving\" ) x += i } fmt . Println ( x ) } HTML \u00b6 <!doctype html> < html class = \"no-js\" lang = \"\" > < head > < meta charset = \"utf-8\" > < meta http-equiv = \"x-ua-compatible\" content = \"ie=edge\" > < title > HTML5 Boilerplate </ title > < meta name = \"description\" content = \"\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"apple-touch-icon\" href = \"apple-touch-icon.png\" > < link rel = \"stylesheet\" href = \"css/normalize.css\" > < link rel = \"stylesheet\" href = \"css/main.css\" > < script src = \"js/vendor/modernizr-2.8.3.min.js\" ></ script > </ head > < body > < p > Hello world! This is HTML5 Boilerplate. </ p > </ body > </ html > Java \u00b6 import java.util.LinkedList ; import java.lang.reflect.Array ; public class UnsortedHashSet < E > { private static final double LOAD_FACTOR_LIMIT = 0.7 ; private int size ; private LinkedList < E >[] con ; public UnsortedHashSet () { con = ( LinkedList < E >[])( new LinkedList [ 10 ]); } public boolean add ( E obj ) { int oldSize = size ; int index = Math . abs ( obj . hashCode ()) % con . length ; if ( con [ index ] == null ) con [ index ] = new LinkedList < E >(); if (! con [ index ]. contains ( obj )) { con [ index ]. add ( obj ); size ++; } if ( 1.0 * size / con . length > LOAD_FACTOR_LIMIT ) resize (); return oldSize != size ; } private void resize () { UnsortedHashSet < E > temp = new UnsortedHashSet < E >(); temp . con = ( LinkedList < E >[])( new LinkedList [ con . length * 2 + 1 ]); for ( int i = 0 ; i < con . length ; i ++) { if ( con [ i ] != null ) for ( E e : con [ i ]) temp . add ( e ); } con = temp . con ; } public int size () { return size ; } } JavaScript \u00b6 var Math = require ( 'lib/math' ); var _extends = function ( target ) { for ( var i = 1 ; i < arguments . length ; i ++ ) { var source = arguments [ i ]; for ( var key in source ) { target [ key ] = source [ key ]; } } return target ; }; var e = exports . e = 2.71828182846 ; exports [ 'default' ] = function ( x ) { return Math . exp ( x ); }; module . exports = _extends ( exports [ 'default' ], exports ); JSON \u00b6 { \"name\" : \"mkdocs-material\" , \"version\" : \"0.2.4\" , \"description\" : \"A Material Design theme for MkDocs\" , \"homepage\" : \"http://squidfunk.github.io/mkdocs-material/\" , \"authors\" : [ \"squidfunk <martin.donath@squidfunk.com>\" ], \"license\" : \"MIT\" , \"main\" : \"Gulpfile.js\" , \"scripts\" : { \"start\" : \"./node_modules/.bin/gulp watch --mkdocs\" , \"build\" : \"./node_modules/.bin/gulp build --production\" } ... } Julia \u00b6 using MXNet mlp = @mx . chain mx . Variable ( : data ) => mx . FullyConnected ( name =: fc1 , num_hidden = 128 ) => mx . Activation ( name =: relu1 , act_type =: relu ) => mx . FullyConnected ( name =: fc2 , num_hidden = 64 ) => mx . Activation ( name =: relu2 , act_type =: relu ) => mx . FullyConnected ( name =: fc3 , num_hidden = 10 ) => mx . SoftmaxOutput ( name =: softmax ) # data provider batch_size = 100 include ( Pkg . dir ( \"MXNet\" , \"examples\" , \"mnist\" , \"mnist-data.jl\" )) train_provider , eval_provider = get_mnist_providers ( batch_size ) # setup model model = mx . FeedForward ( mlp , context = mx . cpu ()) # optimization algorithm optimizer = mx . SGD ( lr = 0.1 , momentum = 0.9 ) # fit parameters mx . fit ( model , optimizer , train_provider , n_epoch = 20 , eval_data = eval_provider ) Lua \u00b6 local ffi = require ( \"ffi\" ) ffi . cdef [[ void Sleep(int ms); int poll(struct pollfd *fds, unsigned long nfds, int timeout); ]] local sleep if ffi . os == \"Windows\" then function sleep ( s ) ffi . C . Sleep ( s * 1000 ) end else function sleep ( s ) ffi . C . poll ( nil , 0 , s * 1000 ) end end for i = 1 , 160 do io.write ( \".\" ); io.flush () sleep ( 0.01 ) end io.write ( \" \\n \" ) MySQL \u00b6 SELECT Employees . EmployeeID , Employees . Name , Employees . Salary , Manager . Name AS Manager FROM Employees LEFT JOIN Employees AS Manager ON Employees . ManagerID = Manager . EmployeeID WHERE Employees . EmployeeID = '087652' ; PHP \u00b6 <?php // src/AppBundle/Controller/LuckyController.php namespace AppBundle\\Controller ; use Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Route ; use Symfony\\Component\\HttpFoundation\\Response ; class LuckyController { /** * @Route(\"/lucky/number\") */ public function numberAction () { $number = mt_rand ( 0 , 100 ); return new Response ( '<html><body>Lucky number: ' . $number . '</body></html>' ); } } Protocol Buffers \u00b6 syntax = \"proto2\" ; package caffe ; // Specifies the shape (dimensions) of a Blob. message BlobShape { repeated int64 dim = 1 [ packed = true ]; } message BlobProto { optional BlobShape shape = 7 ; repeated float data = 5 [ packed = true ]; repeated float diff = 6 [ packed = true ]; // 4D dimensions -- deprecated. Use \"shape\" instead. optional int32 num = 1 [ default = 0 ]; optional int32 channels = 2 [ default = 0 ]; optional int32 height = 3 [ default = 0 ]; optional int32 width = 4 [ default = 0 ]; } Python \u00b6 \"\"\" A very simple MNIST classifier. See extensive documentation at http://tensorflow.org/tutorials/mnist/beginners/index.md \"\"\" from __future__ import absolute_import from __future__ import division from __future__ import print_function # Import data from tensorflow.examples.tutorials.mnist import input_data import tensorflow as tf flags = tf . app . flags FLAGS = flags . FLAGS flags . DEFINE_string ( 'data_dir' , '/tmp/data/' , 'Directory for storing data' ) mnist = input_data . read_data_sets ( FLAGS . data_dir , one_hot = True ) sess = tf . InteractiveSession () # Create the model x = tf . placeholder ( tf . float32 , [ None , 784 ]) W = tf . Variable ( tf . zeros ([ 784 , 10 ])) b = tf . Variable ( tf . zeros ([ 10 ])) y = tf . nn . softmax ( tf . matmul ( x , W ) + b ) Ruby \u00b6 require 'finity/event' require 'finity/machine' require 'finity/state' require 'finity/transition' require 'finity/version' module Finity class InvalidCallback < StandardError ; end class MissingCallback < StandardError ; end class InvalidState < StandardError ; end # Class methods to be injected into the including class upon inclusion. module ClassMethods # Instantiate a new state machine for the including class by accepting a # block with state and event (and subsequent transition) definitions. def finity options = {}, & block @finity ||= Machine . new self , options , & block end # Return the names of all registered states. def states @finity . states . map { | name , _ | name } end # Return the names of all registered events. def events @finity . events . map { | name , _ | name } end end # Inject methods into the including class upon inclusion. def self . included base base . extend ClassMethods end end XML \u00b6 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE mainTag SYSTEM \"some.dtd\" [ENTITY % entity]> <?oxygen RNGSchema=\"some.rng\" type=\"xml\"?> <xs:main-Tag xmlns:xs= \"http://www.w3.org/2001/XMLSchema\" > <!-- This is a sample comment --> <childTag attribute= \"Quoted Value\" another-attribute= 'Single quoted value' a-third-attribute= '123' > <withTextContent> Some text content </withTextContent> <withEntityContent> Some text content with &lt; entities &gt; and mentioning uint8_t and int32_t </withEntityContent> <otherTag attribute= 'Single quoted Value' /> </childTag> <![CDATA[ some CData ]]> </main-Tag>","title":"CodeHilite"},{"location":"extensions/codehilite/#codehilite","text":"CodeHilite is an extension that adds syntax highlighting to code blocks and is included in the standard Markdown library. The highlighting process is executed during compilation of the Markdown file. Syntax highlighting not working? Please ensure that Pygments is installed. See the next section for further directions on how to set up Pygments or use the official Docker image with all dependencies pre-installed.","title":"CodeHilite"},{"location":"extensions/codehilite/#installation","text":"CodeHilite parses code blocks and wraps them in pre tags. If Pygments is installed, which is a generic syntax highlighter with support for over 300 languages , CodeHilite will also highlight the code block. Pygments can be installed with the following command: pip install pygments To enable CodeHilite, add the following lines to your mkdocs.yml : markdown_extensions : - codehilite","title":"Installation"},{"location":"extensions/codehilite/#usage","text":"","title":"Usage"},{"location":"extensions/codehilite/#specifying-the-language","text":"The CodeHilite extension uses the same syntax as regular Markdown code blocks, but needs to know the language of the code block. This can be done in three different ways.","title":"Specifying the language"},{"location":"extensions/codehilite/#via-markdown-syntax-recommended","text":"In Markdown, code blocks can be opened and closed by writing three backticks on separate lines. To add code highlighting to those blocks, the easiest way is to specify the language directly after the opening block. Example: ``` python import tensorflow as tf ``` Result: import tensorflow as tf","title":"via Markdown syntax recommended"},{"location":"extensions/codehilite/#via-shebang","text":"Alternatively, if the first line of a code block contains a shebang, the language is derived from the path referenced in the shebang. This will only work for code blocks that are indented using four spaces, not for those encapsulated in three backticks. Example: #!/usr/bin/python import tensorflow as tf Result: #!/usr/bin/python import tensorflow as tf","title":"via Shebang"},{"location":"extensions/codehilite/#via-three-colons","text":"If the first line starts with three colons followed by a language identifier, the first line is stripped. This will only work for code blocks that are indented using four spaces, not for those encapsulated in three backticks. Example: :::python import tensorflow as tf Result: import tensorflow as tf","title":"via three colons"},{"location":"extensions/codehilite/#adding-line-numbers","text":"Line numbers can be added by enabling the linenums flag in your mkdocs.yml : markdown_extensions : - codehilite : linenums : true Example: ``` python \"\"\" Bubble sort \"\"\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` Result: 1 2 3 4 5 6 \"\"\" Bubble sort \"\"\" def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ]","title":"Adding line numbers"},{"location":"extensions/codehilite/#grouping-code-blocks","text":"The SuperFences extension which is part of the PyMdown Extensions package adds support for grouping code blocks with tabs. This is especially useful for documenting projects with multiple language bindings. Example: ``` bash tab=\"Bash\" #!/bin/bash echo \"Hello world!\" ``` ``` c tab=\"C\" #include <stdio.h> int main(void) { printf(\"Hello world!\\n\"); } ``` ``` c++ tab=\"C++\" #include <iostream> int main() { std::cout << \"Hello world!\" << std::endl; return 0; } ``` ``` c# tab=\"C#\" using System; class Program { static void Main(string[] args) { Console.WriteLine(\"Hello world!\"); } } ``` Result: Bash #!/bin/bash echo \"Hello world!\" C #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); } C++ #include <iostream> int main () { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; } C# using System ; class Program { static void Main ( string [] args ) { Console . WriteLine ( \"Hello world!\" ); } }","title":"Grouping code blocks"},{"location":"extensions/codehilite/#highlighting-specific-lines","text":"Specific lines can be highlighted by passing the line numbers to the hl_lines argument placed right after the language identifier. Line counts start at 1. Example: ``` python hl_lines=\"3 4\" \"\"\" Bubble sort \"\"\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` Result: 1 2 3 4 5 6 \"\"\" Bubble sort \"\"\" def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ]","title":"Highlighting specific lines"},{"location":"extensions/codehilite/#supported-languages-excerpt","text":"CodeHilite uses Pygments , a generic syntax highlighter with support for over 300 languages , so the following list of examples is just an excerpt.","title":"Supported languages excerpt"},{"location":"extensions/codehilite/#bash","text":"#!/bin/bash for OPT in \" $@ \" do case \" $OPT \" in '-f' ) canonicalize = 1 ;; '-n' ) switchlf = \"-n\" ;; esac done # readlink -f function __readlink_f { target = \" $1 \" while test -n \" $target \" ; do filepath = \" $target \" cd ` dirname \" $filepath \" ` target = ` readlink \" $filepath \" ` done /bin/echo $switchlf ` pwd -P ` / ` basename \" $filepath \" ` } if [ ! \" $canonicalize \" ] ; then readlink $switchlf \" $@ \" else for file in \" $@ \" do case \" $file \" in -* ) ;; * ) __readlink_f \" $file \" ;; esac done fi exit $?","title":"Bash"},{"location":"extensions/codehilite/#c","text":"extern size_t pb_varint_scan ( const uint8_t data [], size_t left ) { assert ( data && left ); left = left > 10 ? 10 : left ; #ifdef __SSE2__ /* Mapping: remaining bytes ==> bitmask */ static const int mask_map [] = { 0x0000 , 0x0001 , 0x0003 , 0x0007 , 0x000F , 0x001F , 0x003F , 0x007F , 0x00FF , 0x01FF , 0x03FF }; /* Load buffer into 128-bit integer and create high-bit mask */ __m128i temp = _mm_loadu_si128 (( const __m128i * ) data ); __m128i high = _mm_set1_epi8 ( 0x80 ); /* Intersect and extract mask with high-bits set */ int mask = _mm_movemask_epi8 ( _mm_and_si128 ( temp , high )); mask = ( mask & mask_map [ left ]) ^ mask_map [ left ]; /* Count trailing zeroes */ return mask ? __builtin_ctz ( mask ) + 1 : 0 ; #else /* Linear scan */ size_t size = 0 ; while ( data [ size ++ ] & 0x80 ) if ( !-- left ) return 0 ; return size ; #endif /* __SSE2__ */ }","title":"C"},{"location":"extensions/codehilite/#c_1","text":"Extension :: Extension ( const Descriptor * descriptor , const Descriptor * scope ) : descriptor_ ( descriptor ), scope_ ( scope ) { /* Extract full name for signature */ variables_ [ \"signature\" ] = descriptor_ -> full_name (); /* Prepare message symbol */ variables_ [ \"message\" ] = StringReplace ( variables_ [ \"signature\" ], \".\" , \"_\" , true ); LowerString ( & ( variables_ [ \"message\" ])); /* Suffix scope to identifiers, if given */ string suffix ( \"\" ); if ( scope_ ) { suffix = scope_ -> full_name (); /* Check if the base and extension types are in the same package */ if ( ! scope_ -> file () -> package (). compare ( descriptor_ -> file () -> package ())) suffix = StripPrefixString ( suffix , scope_ -> file () -> package () + \".\" ); /* Append to signature */ variables_ [ \"signature\" ] += \".[\" + suffix + \"]\" ; suffix = \"_\" + suffix ; } /* Prepare extension symbol */ variables_ [ \"extension\" ] = StringReplace ( suffix , \".\" , \"_\" , true ); LowerString ( & ( variables_ [ \"extension\" ])); }","title":"C++"},{"location":"extensions/codehilite/#c_2","text":"public static void Send ( Socket socket , byte [] buffer , int offset , int size , int timeout ) { int startTickCount = Environment . TickCount ; int sent = 0 ; do { if ( Environment . TickCount > startTickCount + timeout ) throw new Exception ( \"Timeout.\" ); try { sent += socket . Send ( buffer , offset + sent , size - sent , SocketFlags . None ); } catch ( SocketException ex ) { if ( ex . SocketErrorCode == SocketError . WouldBlock || ex . SocketErrorCode == SocketError . IOPending || ex . SocketErrorCode == SocketError . NoBufferSpaceAvailable ) { /* Socket buffer is probably full, wait and try again */ Thread . Sleep ( 30 ); } else { throw ex ; } } } while ( sent < size ); }","title":"C&#35;"},{"location":"extensions/codehilite/#clojure","text":"( clojure-version ) ( defn partition-when [ f ] ( fn [ rf ] ( let [ a ( java.util.ArrayList. ) fval ( volatile! false )] ( fn ([] ( rf )) ([ result ] ( let [ result ( if ( .isEmpty a ) result ( let [ v ( vec ( .toArray a ))] ;; Clear first ( .clear a ) ( unreduced ( rf result v ))))] ( rf result ))) ([ result input ] ( if-not ( and ( f input ) @ fval ) ( do ( vreset! fval true ) ( .add a input ) result ) ( let [ v ( vec ( .toArray a ))] ( .clear a ) ( let [ ret ( rf result v )] ( when-not ( reduced? ret ) ( .add a input )) ret )))))))) ( into [] ( partition-when # ( .startsWith % \">>\" )) [ \"1d\" \"33\" \">> 1\" \">> 2\" \"22\" \">> 3\" ])","title":"Clojure"},{"location":"extensions/codehilite/#diff","text":"Index: grunt.js =================================================================== --- grunt.js (revision 31200) +++ grunt.js (working copy) @@ -12,6 +12,7 @@ module.exports = function (grunt) { + console.log('hello world'); // Project configuration. grunt.initConfig({ lint: { @@ -19,10 +20,6 @@ 'packages/services.web/{!(test)/**/,}*.js', 'packages/error/**/*.js' ], - scripts: [ - 'grunt.js', - 'db/**/*.js' - ], browser: [ 'packages/web/server.js', 'packages/web/server/**/*.js',","title":"Diff"},{"location":"extensions/codehilite/#docker","text":"FROM ubuntu # Install vnc, xvfb in order to create a 'fake' display and firefox RUN apt-get update && apt-get install -y x11vnc xvfb firefox RUN mkdir ~/.vnc # Setup a password RUN x11vnc -storepasswd 1234 ~/.vnc/passwd # Autostart firefox (might not be the best way, but it does the trick) RUN bash -c 'echo \"firefox\" >> /.bashrc' EXPOSE 5900 CMD [ \"x11vnc\" , \"-forever\" , \"-usepw\" , \"-create\" ]","title":"Docker"},{"location":"extensions/codehilite/#elixir","text":"require Logger def accept ( port ) do { :ok , socket } = :gen_tcp . listen ( port , [ :binary , packet : :line , active : false , reuseaddr : true ]) Logger . info \"Accepting connections on port #{ port } \" loop_acceptor ( socket ) end defp loop_acceptor ( socket ) do { :ok , client } = :gen_tcp . accept ( socket ) serve ( client ) loop_acceptor ( socket ) end defp serve ( socket ) do socket |> read_line () |> write_line ( socket ) serve ( socket ) end defp read_line ( socket ) do { :ok , data } = :gen_tcp . recv ( socket , 0 ) data end defp write_line ( line , socket ) do :gen_tcp . send ( socket , line ) end","title":"Elixir"},{"location":"extensions/codehilite/#erlang","text":"circular ( Defs ) -> [ { { Type , Base }, Fields } || { { Type , Base }, Fields } <- Defs , Type == msg , circular ( Base , Defs ) ]. circular ( Base , Defs ) -> Fields = proplists : get_value ({ msg , Base }, Defs ), circular ( Defs , Fields , [ Base ]). circular (_ Defs , [], _ Path ) -> false ; circular ( Defs , [ Field | Fields ], Path ) -> case Field #field.type of { msg , Type } -> case lists : member ( Type , Path ) of false -> Children = proplists : get_value ({ msg , Type }, Defs ), case circular ( Defs , Children , [ Type | Path ]) of false -> circular ( Defs , Fields , Path ); true -> true end ; true -> Type == lists : last ( Path ) andalso ( length ( Path ) == 1 orelse not is_tree ( Path )) end ; _ -> circular ( Defs , Fields , Path ) end .","title":"Erlang"},{"location":"extensions/codehilite/#f","text":"/// Asynchronously download retangles from the server /// and decode the JSON format to F# Rectangle record let [< Js >] getRectangles () : Async < Rectangle [] > = async { let req = XMLHttpRequest () req . Open ( \"POST\" , \"/get\" , true ) let! resp = req . AsyncSend () return JSON . parse ( resp ) } /// Repeatedly update rectangles after 0.5 sec let [< Js >] updateLoop () = async { while true do do ! Async . Sleep ( 500 ) let! rects = getRectangles () cleanRectangles () rects |> Array . iter createRectangle }","title":"F&#35;"},{"location":"extensions/codehilite/#go","text":"package main import \"fmt\" func counter ( id int , channel chan int , closer bool ) { for i := 0 ; i < 10000000 ; i ++ { fmt . Println ( \"process\" , id , \" send\" , i ) channel <- 1 } if closer { close ( channel ) } } func main () { channel := make ( chan int ) go counter ( 1 , channel , false ) go counter ( 2 , channel , true ) x := 0 // receiving data from channel for i := range channel { fmt . Println ( \"receiving\" ) x += i } fmt . Println ( x ) }","title":"Go"},{"location":"extensions/codehilite/#html","text":"<!doctype html> < html class = \"no-js\" lang = \"\" > < head > < meta charset = \"utf-8\" > < meta http-equiv = \"x-ua-compatible\" content = \"ie=edge\" > < title > HTML5 Boilerplate </ title > < meta name = \"description\" content = \"\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"apple-touch-icon\" href = \"apple-touch-icon.png\" > < link rel = \"stylesheet\" href = \"css/normalize.css\" > < link rel = \"stylesheet\" href = \"css/main.css\" > < script src = \"js/vendor/modernizr-2.8.3.min.js\" ></ script > </ head > < body > < p > Hello world! This is HTML5 Boilerplate. </ p > </ body > </ html >","title":"HTML"},{"location":"extensions/codehilite/#java","text":"import java.util.LinkedList ; import java.lang.reflect.Array ; public class UnsortedHashSet < E > { private static final double LOAD_FACTOR_LIMIT = 0.7 ; private int size ; private LinkedList < E >[] con ; public UnsortedHashSet () { con = ( LinkedList < E >[])( new LinkedList [ 10 ]); } public boolean add ( E obj ) { int oldSize = size ; int index = Math . abs ( obj . hashCode ()) % con . length ; if ( con [ index ] == null ) con [ index ] = new LinkedList < E >(); if (! con [ index ]. contains ( obj )) { con [ index ]. add ( obj ); size ++; } if ( 1.0 * size / con . length > LOAD_FACTOR_LIMIT ) resize (); return oldSize != size ; } private void resize () { UnsortedHashSet < E > temp = new UnsortedHashSet < E >(); temp . con = ( LinkedList < E >[])( new LinkedList [ con . length * 2 + 1 ]); for ( int i = 0 ; i < con . length ; i ++) { if ( con [ i ] != null ) for ( E e : con [ i ]) temp . add ( e ); } con = temp . con ; } public int size () { return size ; } }","title":"Java"},{"location":"extensions/codehilite/#javascript","text":"var Math = require ( 'lib/math' ); var _extends = function ( target ) { for ( var i = 1 ; i < arguments . length ; i ++ ) { var source = arguments [ i ]; for ( var key in source ) { target [ key ] = source [ key ]; } } return target ; }; var e = exports . e = 2.71828182846 ; exports [ 'default' ] = function ( x ) { return Math . exp ( x ); }; module . exports = _extends ( exports [ 'default' ], exports );","title":"JavaScript"},{"location":"extensions/codehilite/#json","text":"{ \"name\" : \"mkdocs-material\" , \"version\" : \"0.2.4\" , \"description\" : \"A Material Design theme for MkDocs\" , \"homepage\" : \"http://squidfunk.github.io/mkdocs-material/\" , \"authors\" : [ \"squidfunk <martin.donath@squidfunk.com>\" ], \"license\" : \"MIT\" , \"main\" : \"Gulpfile.js\" , \"scripts\" : { \"start\" : \"./node_modules/.bin/gulp watch --mkdocs\" , \"build\" : \"./node_modules/.bin/gulp build --production\" } ... }","title":"JSON"},{"location":"extensions/codehilite/#julia","text":"using MXNet mlp = @mx . chain mx . Variable ( : data ) => mx . FullyConnected ( name =: fc1 , num_hidden = 128 ) => mx . Activation ( name =: relu1 , act_type =: relu ) => mx . FullyConnected ( name =: fc2 , num_hidden = 64 ) => mx . Activation ( name =: relu2 , act_type =: relu ) => mx . FullyConnected ( name =: fc3 , num_hidden = 10 ) => mx . SoftmaxOutput ( name =: softmax ) # data provider batch_size = 100 include ( Pkg . dir ( \"MXNet\" , \"examples\" , \"mnist\" , \"mnist-data.jl\" )) train_provider , eval_provider = get_mnist_providers ( batch_size ) # setup model model = mx . FeedForward ( mlp , context = mx . cpu ()) # optimization algorithm optimizer = mx . SGD ( lr = 0.1 , momentum = 0.9 ) # fit parameters mx . fit ( model , optimizer , train_provider , n_epoch = 20 , eval_data = eval_provider )","title":"Julia"},{"location":"extensions/codehilite/#lua","text":"local ffi = require ( \"ffi\" ) ffi . cdef [[ void Sleep(int ms); int poll(struct pollfd *fds, unsigned long nfds, int timeout); ]] local sleep if ffi . os == \"Windows\" then function sleep ( s ) ffi . C . Sleep ( s * 1000 ) end else function sleep ( s ) ffi . C . poll ( nil , 0 , s * 1000 ) end end for i = 1 , 160 do io.write ( \".\" ); io.flush () sleep ( 0.01 ) end io.write ( \" \\n \" )","title":"Lua"},{"location":"extensions/codehilite/#mysql","text":"SELECT Employees . EmployeeID , Employees . Name , Employees . Salary , Manager . Name AS Manager FROM Employees LEFT JOIN Employees AS Manager ON Employees . ManagerID = Manager . EmployeeID WHERE Employees . EmployeeID = '087652' ;","title":"MySQL"},{"location":"extensions/codehilite/#php","text":"<?php // src/AppBundle/Controller/LuckyController.php namespace AppBundle\\Controller ; use Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Route ; use Symfony\\Component\\HttpFoundation\\Response ; class LuckyController { /** * @Route(\"/lucky/number\") */ public function numberAction () { $number = mt_rand ( 0 , 100 ); return new Response ( '<html><body>Lucky number: ' . $number . '</body></html>' ); } }","title":"PHP"},{"location":"extensions/codehilite/#protocol-buffers","text":"syntax = \"proto2\" ; package caffe ; // Specifies the shape (dimensions) of a Blob. message BlobShape { repeated int64 dim = 1 [ packed = true ]; } message BlobProto { optional BlobShape shape = 7 ; repeated float data = 5 [ packed = true ]; repeated float diff = 6 [ packed = true ]; // 4D dimensions -- deprecated. Use \"shape\" instead. optional int32 num = 1 [ default = 0 ]; optional int32 channels = 2 [ default = 0 ]; optional int32 height = 3 [ default = 0 ]; optional int32 width = 4 [ default = 0 ]; }","title":"Protocol Buffers"},{"location":"extensions/codehilite/#python","text":"\"\"\" A very simple MNIST classifier. See extensive documentation at http://tensorflow.org/tutorials/mnist/beginners/index.md \"\"\" from __future__ import absolute_import from __future__ import division from __future__ import print_function # Import data from tensorflow.examples.tutorials.mnist import input_data import tensorflow as tf flags = tf . app . flags FLAGS = flags . FLAGS flags . DEFINE_string ( 'data_dir' , '/tmp/data/' , 'Directory for storing data' ) mnist = input_data . read_data_sets ( FLAGS . data_dir , one_hot = True ) sess = tf . InteractiveSession () # Create the model x = tf . placeholder ( tf . float32 , [ None , 784 ]) W = tf . Variable ( tf . zeros ([ 784 , 10 ])) b = tf . Variable ( tf . zeros ([ 10 ])) y = tf . nn . softmax ( tf . matmul ( x , W ) + b )","title":"Python"},{"location":"extensions/codehilite/#ruby","text":"require 'finity/event' require 'finity/machine' require 'finity/state' require 'finity/transition' require 'finity/version' module Finity class InvalidCallback < StandardError ; end class MissingCallback < StandardError ; end class InvalidState < StandardError ; end # Class methods to be injected into the including class upon inclusion. module ClassMethods # Instantiate a new state machine for the including class by accepting a # block with state and event (and subsequent transition) definitions. def finity options = {}, & block @finity ||= Machine . new self , options , & block end # Return the names of all registered states. def states @finity . states . map { | name , _ | name } end # Return the names of all registered events. def events @finity . events . map { | name , _ | name } end end # Inject methods into the including class upon inclusion. def self . included base base . extend ClassMethods end end","title":"Ruby"},{"location":"extensions/codehilite/#xml","text":"<?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE mainTag SYSTEM \"some.dtd\" [ENTITY % entity]> <?oxygen RNGSchema=\"some.rng\" type=\"xml\"?> <xs:main-Tag xmlns:xs= \"http://www.w3.org/2001/XMLSchema\" > <!-- This is a sample comment --> <childTag attribute= \"Quoted Value\" another-attribute= 'Single quoted value' a-third-attribute= '123' > <withTextContent> Some text content </withTextContent> <withEntityContent> Some text content with &lt; entities &gt; and mentioning uint8_t and int32_t </withEntityContent> <otherTag attribute= 'Single quoted Value' /> </childTag> <![CDATA[ some CData ]]> </main-Tag>","title":"XML"},{"location":"extensions/footnotes/","text":"Footnotes \u00b6 Footnotes is another extension included in the standard Markdown library. As the name says, it adds the ability to add footnotes to your documentation. Installation \u00b6 Add the following lines to your mkdocs.yml : markdown_extensions : - footnotes Usage \u00b6 The markup for footnotes is similar to the standard Markdown markup for links. A reference is inserted in the text, which can then be defined at any point in the document. Inserting the reference \u00b6 The footnote reference is enclosed in square brackets and starts with a caret, followed by an arbitrary label which may contain numeric identifiers [1, 2, 3, ...] or names [Granovetter et al. 1998]. The rendered references are always consecutive superscripted numbers. Example: Lorem ipsum[^1] dolor sit amet, consectetur adipiscing elit.[^2] Result: Lorem ipsum 1 dolor sit amet, consectetur adipiscing elit. 2 Inserting the content \u00b6 The footnote content is also declared with a label, which must match the label used for the footnote reference. It can be inserted at an arbitrary position in the document and is always rendered at the bottom of the page. Furthermore, a backlink is automatically added to the footnote reference. on a single line \u00b6 Short statements can be written on the same line. Example: [^1]: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Result: Jump to footnote at the bottom of the page on multiple lines \u00b6 Paragraphs should be written on the next line. As with all Markdown blocks, the content must be indented by four spaces. Example: [^2]: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Jump to footnote at the bottom of the page Lorem ipsum dolor sit amet, consectetur adipiscing elit. \u21a9 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. \u21a9","title":"Footnotes"},{"location":"extensions/footnotes/#footnotes","text":"Footnotes is another extension included in the standard Markdown library. As the name says, it adds the ability to add footnotes to your documentation.","title":"Footnotes"},{"location":"extensions/footnotes/#installation","text":"Add the following lines to your mkdocs.yml : markdown_extensions : - footnotes","title":"Installation"},{"location":"extensions/footnotes/#usage","text":"The markup for footnotes is similar to the standard Markdown markup for links. A reference is inserted in the text, which can then be defined at any point in the document.","title":"Usage"},{"location":"extensions/footnotes/#inserting-the-reference","text":"The footnote reference is enclosed in square brackets and starts with a caret, followed by an arbitrary label which may contain numeric identifiers [1, 2, 3, ...] or names [Granovetter et al. 1998]. The rendered references are always consecutive superscripted numbers. Example: Lorem ipsum[^1] dolor sit amet, consectetur adipiscing elit.[^2] Result: Lorem ipsum 1 dolor sit amet, consectetur adipiscing elit. 2","title":"Inserting the reference"},{"location":"extensions/footnotes/#inserting-the-content","text":"The footnote content is also declared with a label, which must match the label used for the footnote reference. It can be inserted at an arbitrary position in the document and is always rendered at the bottom of the page. Furthermore, a backlink is automatically added to the footnote reference.","title":"Inserting the content"},{"location":"extensions/footnotes/#on-a-single-line","text":"Short statements can be written on the same line. Example: [^1]: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Result: Jump to footnote at the bottom of the page","title":"on a single line"},{"location":"extensions/footnotes/#on-multiple-lines","text":"Paragraphs should be written on the next line. As with all Markdown blocks, the content must be indented by four spaces. Example: [^2]: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Jump to footnote at the bottom of the page Lorem ipsum dolor sit amet, consectetur adipiscing elit. \u21a9 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. \u21a9","title":"on multiple lines"},{"location":"extensions/metadata/","text":"Metadata \u00b6 The Metadata extension makes it possible to add metadata to a document which gives more control over the theme in a page-specific context. Installation \u00b6 Add the following lines to your mkdocs.yml : markdown_extensions : - meta Usage \u00b6 Metadata is written as a series of key-value pairs at the beginning of the Markdown document, delimited by a blank line which ends the metadata context. Naturally, the metadata is stripped from the document before rendering the actual page content and made available to the theme. Example: title: Lorem ipsum dolor sit amet description: Nullam urna elit, malesuada eget finibus ut, ac tortor. path: path/to/file source: file.js # Headline ... See the next section which covers the metadata that is supported by Material. Setting a hero text \u00b6 Material exposes a simple text-only page-local hero via Metadata, as you can see on the current page when you scroll to the top. It's as simple as: hero: Metadata enables hero teaser texts Linking sources \u00b6 When a document is related to a specific set of source files and the repo_url is defined inside the project's mkdocs.yml , the files can be linked using the source key: source: file.js The filename is appended to the repo_url set in your mkdocs.yml , but can be prefixed with a path to ensure correct path resolving: Example: path: tree/master/docs/extensions source: metadata.md Result: See the source section for the resulting output. Redirecting to another page \u00b6 It's sometimes necessary to move documents around in the navigation tree and redirect user from the old URL to the new one. The redirect meta-tag allows to create a redirection from the current document to the address specified in the tag. For instance, if your document contains: redirect: /new/url accessing that document's URL will automatically redirect to /new/url . Overrides \u00b6 Page title \u00b6 The page title can be overridden on a per-document level: title: Lorem ipsum dolor sit amet This will set the title tag inside the document head for the current page to the provided value. It will also override the default behavior of Material for MkDocs which appends the site title using a dash as a separator to the page title. Page description \u00b6 The page description can also be overridden on a per-document level: description : Nullam urna elit, malesuada eget finibus ut, ac tortor. This will set the meta tag containing the site description inside the document head for the current page to the provided value. Disqus \u00b6 As describe in the getting started guide , the Disqus comments section can be enabled on a per-document level: disqus: your-shortname Disqus can be disabled for a specific page by setting it to an empty value: disqus:","title":"Metadata"},{"location":"extensions/metadata/#metadata","text":"The Metadata extension makes it possible to add metadata to a document which gives more control over the theme in a page-specific context.","title":"Metadata"},{"location":"extensions/metadata/#installation","text":"Add the following lines to your mkdocs.yml : markdown_extensions : - meta","title":"Installation"},{"location":"extensions/metadata/#usage","text":"Metadata is written as a series of key-value pairs at the beginning of the Markdown document, delimited by a blank line which ends the metadata context. Naturally, the metadata is stripped from the document before rendering the actual page content and made available to the theme. Example: title: Lorem ipsum dolor sit amet description: Nullam urna elit, malesuada eget finibus ut, ac tortor. path: path/to/file source: file.js # Headline ... See the next section which covers the metadata that is supported by Material.","title":"Usage"},{"location":"extensions/metadata/#setting-a-hero-text","text":"Material exposes a simple text-only page-local hero via Metadata, as you can see on the current page when you scroll to the top. It's as simple as: hero: Metadata enables hero teaser texts","title":"Setting a hero text"},{"location":"extensions/metadata/#linking-sources","text":"When a document is related to a specific set of source files and the repo_url is defined inside the project's mkdocs.yml , the files can be linked using the source key: source: file.js The filename is appended to the repo_url set in your mkdocs.yml , but can be prefixed with a path to ensure correct path resolving: Example: path: tree/master/docs/extensions source: metadata.md Result: See the source section for the resulting output.","title":"Linking sources"},{"location":"extensions/metadata/#redirecting-to-another-page","text":"It's sometimes necessary to move documents around in the navigation tree and redirect user from the old URL to the new one. The redirect meta-tag allows to create a redirection from the current document to the address specified in the tag. For instance, if your document contains: redirect: /new/url accessing that document's URL will automatically redirect to /new/url .","title":"Redirecting to another page"},{"location":"extensions/metadata/#overrides","text":"","title":"Overrides"},{"location":"extensions/metadata/#page-title","text":"The page title can be overridden on a per-document level: title: Lorem ipsum dolor sit amet This will set the title tag inside the document head for the current page to the provided value. It will also override the default behavior of Material for MkDocs which appends the site title using a dash as a separator to the page title.","title":"Page title"},{"location":"extensions/metadata/#page-description","text":"The page description can also be overridden on a per-document level: description : Nullam urna elit, malesuada eget finibus ut, ac tortor. This will set the meta tag containing the site description inside the document head for the current page to the provided value.","title":"Page description"},{"location":"extensions/metadata/#disqus","text":"As describe in the getting started guide , the Disqus comments section can be enabled on a per-document level: disqus: your-shortname Disqus can be disabled for a specific page by setting it to an empty value: disqus:","title":"Disqus"},{"location":"extensions/permalinks/","text":"Permalinks \u00b6 Permalinks are a feature of the Table of Contents extension, which is part of the standard Markdown library. The extension inserts an anchor at the end of each headline, which makes it possible to directly link to a subpart of the document. Installation \u00b6 To enable permalinks, add the following to your mkdocs.yml : markdown_extensions : - toc : permalink : true This will add a link containing the paragraph symbol \u00b6 at the end of each headline (exactly like on the page you're currently viewing), which the Material theme will make appear on hover. In order to change the text of the permalink, a string can be passed, e.g.: markdown_extensions: - toc: permalink: Link Usage \u00b6 When enabled, permalinks are inserted automatically.","title":"Permalinks"},{"location":"extensions/permalinks/#permalinks","text":"Permalinks are a feature of the Table of Contents extension, which is part of the standard Markdown library. The extension inserts an anchor at the end of each headline, which makes it possible to directly link to a subpart of the document.","title":"Permalinks"},{"location":"extensions/permalinks/#installation","text":"To enable permalinks, add the following to your mkdocs.yml : markdown_extensions : - toc : permalink : true This will add a link containing the paragraph symbol \u00b6 at the end of each headline (exactly like on the page you're currently viewing), which the Material theme will make appear on hover. In order to change the text of the permalink, a string can be passed, e.g.: markdown_extensions: - toc: permalink: Link","title":"Installation"},{"location":"extensions/permalinks/#usage","text":"When enabled, permalinks are inserted automatically.","title":"Usage"},{"location":"extensions/pymdown/","text":"PyMdown Extensions \u00b6 PyMdown Extensions is a collection of Markdown extensions that add some great features to the standard Markdown library. For this reason, the installation of this package is highly recommended as it's well-integrated with the Material theme. Installation \u00b6 The PyMdown Extensions package can be installed with the following command: pip install pymdown-extensions The following list of extensions that are part of the PyMdown Extensions package are recommended to be used together with the Material theme: markdown_extensions : - pymdownx.arithmatex - pymdownx.betterem : smart_enable : all - pymdownx.caret - pymdownx.critic - pymdownx.details - pymdownx.emoji : emoji_generator : !!python/name:pymdownx.emoji.to_svg - pymdownx.inlinehilite - pymdownx.magiclink - pymdownx.mark - pymdownx.smartsymbols - pymdownx.superfences - pymdownx.tasklist : custom_checkbox : true - pymdownx.tilde Usage \u00b6 Arithmatex MathJax \u00b6 Arithmatex integrates Material with MathJax which parses block-style and inline equations written in TeX markup and outputs them in mathematical notation. See this thread for a short introduction and quick reference on how to write equations in TeX syntax. Besides activating the extension in the mkdocs.yml , the MathJax JavaScript runtime needs to be included. This must be done with additional JavaScript : extra_javascript : - 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-MML-AM_CHTML' If you want to override the default MathJax configuration, you can do this by adding another JavaScript file before the MathJax runtime in extra_javascript which contains your MathJax configuration, e.g.: window . MathJax = { tex2jax : { inlineMath : [ [ \"\\\\(\" , \"\\\\)\" ] ], displayMath : [ [ \"\\\\[\" , \"\\\\]\" ] ] }, TeX : { TagSide : \"right\" , TagIndent : \".8em\" , MultLineWidth : \"85%\" , equationNumbers : { autoNumber : \"AMS\" , }, unicode : { fonts : \"STIXGeneral,'Arial Unicode MS'\" } }, displayAlign : \"left\" , showProcessingMessages : false , messageStyle : \"none\" }; In your mkdocs.yml , include it with: extra_javascript : - 'javascripts/extra.js' - 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-MML-AM_CHTML' Blocks \u00b6 Blocks are enclosed in $$ ... $$ which are placed on separate lines. Example: $$ \\frac {n ! }{k !( n - k )! } = \\binom {n}{k} $$ Result: \\frac{n!}{k!(n-k)!} = \\binom{n}{k} \\frac{n!}{k!(n-k)!} = \\binom{n}{k} Inline \u00b6 Inline equations need to be enclosed in $ ... $ : Example: Lorem ipsum dolor sit amet: $ p ( x|y ) = \\frac {p ( y|x ) p ( x ) }{p ( y ) } $ Result: Lorem ipsum dolor sit amet: p(x|y) = \\frac{p(y|x)p(x)}{p(y)} p(x|y) = \\frac{p(y|x)p(x)}{p(y)} BetterEm \u00b6 BetterEm improves the handling of emphasis markup ( bold and italic ) within Markdown by providing a more sophisticated parser for better detecting start and end tokens. Read the documentation for usage notes . Caret \u00b6 Caret makes it possible to highlight inserted text . The portion of text that should be marked as added must be enclosed in two carets ^^...^^ . Critic \u00b6 Critic implements Critic Markup , a Markdown extension that enables the tracking of changes (additions, deletions and comments) on documents. During compilation of the Markdown document, changes can be rendered (default), accepted or rejected. Text can be deleted and replacement text added . This can also be combined into one a single operation. Highlighting is also possible and comments can be added inline . Formatting can also be applied to blocks, by putting the opening and closing tags on separate lines and adding new lines between the tags and the content. Details \u00b6 Details adds collapsible Admonition-style blocks which can contain arbitrary content using the HTML5 details and summary tags. Additionally, all Admonition qualifiers can be used, e.g. note , question , warning etc.: How many Prolog programmers does it take to change a lightbulb? Yes. Emoji \u00b6 Emoji adds the ability to insert a -load of emojis that we use in our daily lives. See the EmojiOne demo for a list of all available emojis. Happy scrolling Legal disclaimer Material has no affiliation with EmojiOne which is released under CC BY 4.0 . When including EmojiOne images or CSS, please read the EmojiOne license to ensure proper usage and attribution. InlineHilite \u00b6 InlineHilite adds support for inline code highlighting. It's useful for short snippets included within body copy, e.g. var test = 0 ; and can be achived by prefixing inline code with a shebang and language identifier, e.g. #!js . MagicLink \u00b6 MagicLink detects links in Markdown and auto-generates the necessary markup, so no special syntax is required. It auto-links http[s]:// and ftp:// links, as well as references to email addresses. Mark \u00b6 Mark adds the ability to highlight text like it was marked with a text marker . The portion of text that should be highlighted must be enclosed in two equal signs ==...== . SmartSymbols \u00b6 SmartSymbols converts markup for special characters into their corresponding symbols, e.g. arrows (\u2190, \u2192, \u2194), trademark and copyright symbols (\u00a9, \u2122, \u00ae) and fractions (\u00bd, \u00bc, ...). SuperFences \u00b6 SuperFences provides the ability to nest code blocks under blockquotes, lists and other block elements, which the Fenced Code Blocks extension from the standard Markdown library doesn't parse correctly. SuperFences does also allow grouping code blocks with tabs . Tasklist \u00b6 Tasklist adds support for styled checkbox lists. This is useful for keeping track of tasks and showing what has been done and has yet to be done. Checkbox lists are like regular lists, but prefixed with [ ] for empty or [x] for filled checkboxes. Example: * [x] Lorem ipsum dolor sit amet, consectetur adipiscing elit * [x] Nulla lobortis egestas semper * [x] Curabitur elit nibh, euismod et ullamcorper at, iaculis feugiat est * [ ] Vestibulum convallis sit amet nisi a tincidunt * [x] In hac habitasse platea dictumst * [x] In scelerisque nibh non dolor mollis congue sed et metus * [x] Sed egestas felis quis elit dapibus, ac aliquet turpis mattis * [ ] Praesent sed risus massa * [ ] Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque * [ ] Nulla vel eros venenatis, imperdiet enim id, faucibus nisi Result: Lorem ipsum dolor sit amet, consectetur adipiscing elit Nulla lobortis egestas semper Curabitur elit nibh, euismod et ullamcorper at, iaculis feugiat est Vestibulum convallis sit amet nisi a tincidunt In hac habitasse platea dictumst In scelerisque nibh non dolor mollis congue sed et metus Sed egestas felis quis elit dapibus, ac aliquet turpis mattis Praesent sed risus massa Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque Nulla vel eros venenatis, imperdiet enim id, faucibus nisi Tilde \u00b6 Tilde provides an easy way to strike through cross out text. The portion of text that should be erased must be enclosed in two tildes ~~...~~ and the extension will take care of the rest.","title":"PyMdown Extensions"},{"location":"extensions/pymdown/#pymdown-extensions","text":"PyMdown Extensions is a collection of Markdown extensions that add some great features to the standard Markdown library. For this reason, the installation of this package is highly recommended as it's well-integrated with the Material theme.","title":"PyMdown Extensions"},{"location":"extensions/pymdown/#installation","text":"The PyMdown Extensions package can be installed with the following command: pip install pymdown-extensions The following list of extensions that are part of the PyMdown Extensions package are recommended to be used together with the Material theme: markdown_extensions : - pymdownx.arithmatex - pymdownx.betterem : smart_enable : all - pymdownx.caret - pymdownx.critic - pymdownx.details - pymdownx.emoji : emoji_generator : !!python/name:pymdownx.emoji.to_svg - pymdownx.inlinehilite - pymdownx.magiclink - pymdownx.mark - pymdownx.smartsymbols - pymdownx.superfences - pymdownx.tasklist : custom_checkbox : true - pymdownx.tilde","title":"Installation"},{"location":"extensions/pymdown/#usage","text":"","title":"Usage"},{"location":"extensions/pymdown/#arithmatex-mathjax","text":"Arithmatex integrates Material with MathJax which parses block-style and inline equations written in TeX markup and outputs them in mathematical notation. See this thread for a short introduction and quick reference on how to write equations in TeX syntax. Besides activating the extension in the mkdocs.yml , the MathJax JavaScript runtime needs to be included. This must be done with additional JavaScript : extra_javascript : - 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-MML-AM_CHTML' If you want to override the default MathJax configuration, you can do this by adding another JavaScript file before the MathJax runtime in extra_javascript which contains your MathJax configuration, e.g.: window . MathJax = { tex2jax : { inlineMath : [ [ \"\\\\(\" , \"\\\\)\" ] ], displayMath : [ [ \"\\\\[\" , \"\\\\]\" ] ] }, TeX : { TagSide : \"right\" , TagIndent : \".8em\" , MultLineWidth : \"85%\" , equationNumbers : { autoNumber : \"AMS\" , }, unicode : { fonts : \"STIXGeneral,'Arial Unicode MS'\" } }, displayAlign : \"left\" , showProcessingMessages : false , messageStyle : \"none\" }; In your mkdocs.yml , include it with: extra_javascript : - 'javascripts/extra.js' - 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-MML-AM_CHTML'","title":"Arithmatex MathJax"},{"location":"extensions/pymdown/#blocks","text":"Blocks are enclosed in $$ ... $$ which are placed on separate lines. Example: $$ \\frac {n ! }{k !( n - k )! } = \\binom {n}{k} $$ Result: \\frac{n!}{k!(n-k)!} = \\binom{n}{k} \\frac{n!}{k!(n-k)!} = \\binom{n}{k}","title":"Blocks"},{"location":"extensions/pymdown/#inline","text":"Inline equations need to be enclosed in $ ... $ : Example: Lorem ipsum dolor sit amet: $ p ( x|y ) = \\frac {p ( y|x ) p ( x ) }{p ( y ) } $ Result: Lorem ipsum dolor sit amet: p(x|y) = \\frac{p(y|x)p(x)}{p(y)} p(x|y) = \\frac{p(y|x)p(x)}{p(y)}","title":"Inline"},{"location":"extensions/pymdown/#betterem","text":"BetterEm improves the handling of emphasis markup ( bold and italic ) within Markdown by providing a more sophisticated parser for better detecting start and end tokens. Read the documentation for usage notes .","title":"BetterEm"},{"location":"extensions/pymdown/#caret","text":"Caret makes it possible to highlight inserted text . The portion of text that should be marked as added must be enclosed in two carets ^^...^^ .","title":"Caret"},{"location":"extensions/pymdown/#critic","text":"Critic implements Critic Markup , a Markdown extension that enables the tracking of changes (additions, deletions and comments) on documents. During compilation of the Markdown document, changes can be rendered (default), accepted or rejected. Text can be deleted and replacement text added . This can also be combined into one a single operation. Highlighting is also possible and comments can be added inline . Formatting can also be applied to blocks, by putting the opening and closing tags on separate lines and adding new lines between the tags and the content.","title":"Critic"},{"location":"extensions/pymdown/#details","text":"Details adds collapsible Admonition-style blocks which can contain arbitrary content using the HTML5 details and summary tags. Additionally, all Admonition qualifiers can be used, e.g. note , question , warning etc.: How many Prolog programmers does it take to change a lightbulb? Yes.","title":"Details"},{"location":"extensions/pymdown/#emoji","text":"Emoji adds the ability to insert a -load of emojis that we use in our daily lives. See the EmojiOne demo for a list of all available emojis. Happy scrolling Legal disclaimer Material has no affiliation with EmojiOne which is released under CC BY 4.0 . When including EmojiOne images or CSS, please read the EmojiOne license to ensure proper usage and attribution.","title":"Emoji"},{"location":"extensions/pymdown/#inlinehilite","text":"InlineHilite adds support for inline code highlighting. It's useful for short snippets included within body copy, e.g. var test = 0 ; and can be achived by prefixing inline code with a shebang and language identifier, e.g. #!js .","title":"InlineHilite"},{"location":"extensions/pymdown/#magiclink","text":"MagicLink detects links in Markdown and auto-generates the necessary markup, so no special syntax is required. It auto-links http[s]:// and ftp:// links, as well as references to email addresses.","title":"MagicLink"},{"location":"extensions/pymdown/#mark","text":"Mark adds the ability to highlight text like it was marked with a text marker . The portion of text that should be highlighted must be enclosed in two equal signs ==...== .","title":"Mark"},{"location":"extensions/pymdown/#smartsymbols","text":"SmartSymbols converts markup for special characters into their corresponding symbols, e.g. arrows (\u2190, \u2192, \u2194), trademark and copyright symbols (\u00a9, \u2122, \u00ae) and fractions (\u00bd, \u00bc, ...).","title":"SmartSymbols"},{"location":"extensions/pymdown/#superfences","text":"SuperFences provides the ability to nest code blocks under blockquotes, lists and other block elements, which the Fenced Code Blocks extension from the standard Markdown library doesn't parse correctly. SuperFences does also allow grouping code blocks with tabs .","title":"SuperFences"},{"location":"extensions/pymdown/#tasklist","text":"Tasklist adds support for styled checkbox lists. This is useful for keeping track of tasks and showing what has been done and has yet to be done. Checkbox lists are like regular lists, but prefixed with [ ] for empty or [x] for filled checkboxes. Example: * [x] Lorem ipsum dolor sit amet, consectetur adipiscing elit * [x] Nulla lobortis egestas semper * [x] Curabitur elit nibh, euismod et ullamcorper at, iaculis feugiat est * [ ] Vestibulum convallis sit amet nisi a tincidunt * [x] In hac habitasse platea dictumst * [x] In scelerisque nibh non dolor mollis congue sed et metus * [x] Sed egestas felis quis elit dapibus, ac aliquet turpis mattis * [ ] Praesent sed risus massa * [ ] Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque * [ ] Nulla vel eros venenatis, imperdiet enim id, faucibus nisi Result: Lorem ipsum dolor sit amet, consectetur adipiscing elit Nulla lobortis egestas semper Curabitur elit nibh, euismod et ullamcorper at, iaculis feugiat est Vestibulum convallis sit amet nisi a tincidunt In hac habitasse platea dictumst In scelerisque nibh non dolor mollis congue sed et metus Sed egestas felis quis elit dapibus, ac aliquet turpis mattis Praesent sed risus massa Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque Nulla vel eros venenatis, imperdiet enim id, faucibus nisi","title":"Tasklist"},{"location":"extensions/pymdown/#tilde","text":"Tilde provides an easy way to strike through cross out text. The portion of text that should be erased must be enclosed in two tildes ~~...~~ and the extension will take care of the rest.","title":"Tilde"}]}